Query: How do I get the username of operating system active user?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12017880)
  import java.io.FileInputStream;    
import java.io.IOException;    
import java.util.Scanner;    
/**
 *
 * @author Abhishek Banerjee
 */    
public class NewMain {        
    public static void main(String[] args) throws IOException {
        Scanner s1,s2;
        s1=new Scanner(new FileInputStream("d:\\log.txt"));
        s2=new Scanner(System.in);
        boolean flag=false;
        String name,pword,n,p;
        System.out.println("Enter name:");
        n=s2.next();
        System.out.println("Enter password:");
        p=s2.next();
        while(s1.hasNext()) {
            name=s1.next();
            pword=s1.next();
            if(n.equals(name) && p.equals(pword)) {
                System.out.println("You are logged in.");
                flag=true;
                break;
            }                
        }
        if(!flag)
        System.out.println("Incorrect password.");
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/44544008)
 You can check system property user.timezone:  

     System.getProperty("user.timezone")
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/47235441)
  System.getProperty("user.name");
  

 This might help 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/2269242)
 I don't exactly trust reading the os.arch system variable.   While it works if a user is running a 64bit JVM on a 64bit system.  It doesn't work if the user is running a 32bit JVM on a 64 bit system. 

 The following code works for properly detecting Windows 64-bit operating systems.   On a Windows 64 bit system the environment variable
"Programfiles(x86)" will be set.  It will NOT be set on a 32-bit system and java will read it as null. 

  boolean is64bit = false;
if (System.getProperty("os.name").contains("Windows")) {
    is64bit = (System.getenv("ProgramFiles(x86)") != null);
} else {
    is64bit = (System.getProperty("os.arch").indexOf("64") != -1);
}
  

 For other operating systems like Linux or Solaris or Mac we may see this problem as well.  So this isn't a complete solution.  For mac you are probably safe because apple locks down the JVM to match the OS.  .. they may still use a 32-bit JVM on their 64-bit system.   So use this with caution. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/24715283)
 To be precise, you can try following code: 

  public Locale getLocale() {
    if (this.locale == null) {
        this.locale = new Locale(System.getProperty("user.language"), System.getProperty("user.country"));
    }
    return this.locale;
}
  



