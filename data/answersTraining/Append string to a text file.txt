Query: Append string to a text file
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/19084474)
 In  EDIT 2:  

  while((line = bufferedReader.readLine()) != null)
{
  sb.append(line); //append the lines to the string
  sb.append('\n'); //append new line
} //end while
  

 you are reading the text file, and appending a newline to it.   Don't append newline, which will not show a newline in some simple-minded Windows editors like Notepad.  Instead append the OS-specific line separator string using: 

  sb.append(System.lineSeparator());   ( for Java 1.7 and 1.8 ) 
 or  
 sb.append(System.getProperty("line.separator"));  ( Java 1.6 and below ) 

 Alternatively, later you can use  String.replaceAll()  to replace  "\n"  in the string built in the StringBuffer with the OS-specific newline character: 

  String updatedText = text.replaceAll("\n", System.lineSeparator())  

 but it would be more efficient to append it while you are building the string, than append  '\n'  and replace it later. 

 Finally, as a developer, if you are using notepad for viewing or editing files, you should drop it, as there are far more capable tools like http://notepad-plus-plus.org/, or your favorite Java IDE. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19947803)
 In Java 7, 

  Files.write(FileSystems.getDefault().getPath(targetDir,fileName),
strContent.getBytes(),StandardOpenOption.CREATE,StandardOpenOption.APPEND);
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/29763949)
    

   line.append(text);
 line.append(System.getProperty ("line.separator"));


 //line.append(text);
 //line.append(", ");
  

  And replace it with this:  

   line.append(text + ",");
  

 Also, it would be better to change your  text  variable to: 

  String text = "";
  

 I don't like to make a String object  null . It's not good practice. 



