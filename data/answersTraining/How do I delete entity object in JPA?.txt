Query: How do I delete entity object in JPA?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/30019803)
 Change your DELETE query to: 

  Query query = Seller.entityManager().createQuery(
    "DELETE FROM Seller AS o WHERE o.company=:company AND o.id=:id");
query.setParameter("company", company);
query.setParameter("id", id);
int result = query.executeUpdate();
  

 The DML JPQL queries are not typed, because they only return the affected rows and so they don't need a return type. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/33545406)
 First Of All, I don't think it is a 'beautiful' solution to put business methods in your entity class.  

 I would recommend creating DAO object for your A class and make your relationship bi-directional with CascadeType set to REMOVE:  

  @Entity
class A {
    @OneToMany(mappedBy = "parentB", cascade = CascadeType.REMOVE)
    private Set<Child> childrenB;

    @OneToMany(mappedBy = "parentC", cascade = CascadeType.REMOVE)
    private Set<Child> childrenC;
}

@Stateless
class daoA {
  @PersistenceContext
  EntityManager em;

  public void remove(A a){
    em.delete(a);
  }
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17455274)
 When we call persist() with an entity JPA creates a new object for database. When you use @GeneratedValue(strategy=GenerationType.AUTO) for id then JPA will responsible for id generation.Since JPA generate id for associated entity at flush time so you need to flush the entityManager instance. 

  Entity entity = new Entity();
entity.setAddresse("Address");
em.persist(entity);
em.flush();
  

 after flush you will get the id for you entity. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/29142176)
 You could use  @Embeddable  and  @Embedded  JPA annotations. 

  @Entity
public class Cat {
  @Id String name;
  @Embedded
  Fur fur;
}

@Embeddable
public class Fur {
  String color1;
  String color2;
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/31281000)
  TypedQuery<Persona> q = em.createQuery("SELECT t FROM persona t WHERE t.value1 = :value1 AND t.value2 = :value2", Persona.class);
Persona result = q.setParameter("value1", val1)
                  .setParameter("value2", val2)
                  .setMaxResults(1)
                  .getSingleResult();
  



