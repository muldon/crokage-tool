Query: How to recursively list all text files in a directory?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/15291433)
 This Function will probably list all the file name and its path from its directory and its subdirectories.  

  public void listFile(String pathname) {
    File f = new File(pathname);
    File[] listfiles = f.listFiles();
    for (int i = 0; i < listfiles.length; i++) {
        if (listfiles[i].isDirectory()) {
            File[] internalFile = listfiles[i].listFiles();
            for (int j = 0; j < internalFile.length; j++) {
                System.out.println(internalFile[j]);
                if (internalFile[j].isDirectory()) {
                    String name = internalFile[j].getAbsolutePath();
                    listFile(name);
                }

            }
        } else {
            System.out.println(listfiles[i]);
        }

    }

}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29972265)
 You can use java.io.FilenameFilter to filter files in a directory. 

  import java.io.*;

public class Data {

    public static void main(String[] args) throws IOException {
        String target_dir = "C:\\Files";
        File dir = new File(target_dir);
        FilenameFilter textFileFilter = new FilenameFilter() {

            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".txt");
            }
        };
        File[] files = dir.listFiles(textFileFilter);

       for (File textfiles : files) {
           if (textfiles.isFile()) {

               BufferedReader inputStream = null;

               try {
                   inputStream = new BufferedReader(new FileReader(textfiles));
                   String line;

                   while ((line = inputStream.readLine()) != null) {
                       System.out.println(line);
                   }
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                }
            }
        }
    }
}

}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1384961)
  

  List<String> textFiles(String directory) {
  List<String> textFiles = new ArrayList<String>();
  File dir = new File(directory);
  for (File file : dir.listFiles()) {
    if (file.getName().endsWith((".txt"))) {
      textFiles.add(file.getName());
    }
  }
  return textFiles;
}
  

 You want to do a case insensitive search in which case: 

      if (file.getName().toLowerCase().endsWith((".txt"))) {
  

 If you want to recursively search for through a directory tree for text files, you should be able to adapt the above as either a recursive function or an iterative function using a stack. 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/1455441)
 Try a class with a recursive method something like this: 

  public class Searcher {

    private String toFind, toReplace;
    // whatever other info you need

    public void searchInTextFiles(File dir) {
        File[] a = dir.list();
        for (File f : a) {
            if (f.isDirectory()) {
                searchInTextFiles(f);
            } else if (f.name().endsWith(".txt")) {
                searchInFile(f);
            }
        }
    }

    private void searchInFile(File f) {
        // do whatever you need to do on f using fields from this class
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/13544215)
 using the java.nio.file capabilites of java 7. I implemented similiar func. and added some test. 

  . 

              "c:/"  "c:/windows"
file.io   36272ms       14082ms
file.nio   7167ms        2987ms  
  

 Read more in the javadoc, it's quite powerfull API 

 http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html#visitFileFailed%28T,%20java.io.IOException%29 

  public static void main(String[] args) {
    long starttime = System.currentTimeMillis();
    try {
        Path startPath = Paths.get("c:/");
        Files.walkFileTree(startPath, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult preVisitDirectory(Path dir,
                    BasicFileAttributes attrs) {
                System.out.println("Dir: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
                if (file.toString().endsWith(".txt")){
                    System.out.println(file.toString());    
                }
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException e) {
                return FileVisitResult.CONTINUE;
            }
        });
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    long completetime = System.currentTimeMillis() - starttime;
    System.out.println("totaltime=" + completetime);

}
  



