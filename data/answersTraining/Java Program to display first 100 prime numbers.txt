Query: Java Program to display first 100 prime numbers
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/23117828)
 I think you're having an issue here - 

  String output = number + " is" 
    + (BigInteger(input) ? " " : " not ") + "a prime     number: " 
    + BigInteger(input);
  

 And you want something more like this - 

  String output = num + " is" 
    + (IsPrime(num) ? " " : " not ") + "a prime number.";
  

 I tested your  IsPrime  function, and it correctly identified 5 as prime and 4 as not prime. You should probably rename it  isPrime  to be inline with Java naming conventions. 

    

  public static void main(String[] args) {
    // prompt user to input a number

    String input = JOptionPane.showInputDialog("Enter number ");
    // change string to int
    int number = Integer.parseInt(input);

    // display message to user of their results
    BigInteger num = new BigInteger(input);

    String output = num + " is" + (IsPrime(num) ? " " : " not ")
            + "a prime number.";

    JOptionPane.showMessageDialog(null, output);
}
  

   

   

   


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/20333700)
  for (index=2; index<= (int) Math.sqrt(20000000); index++);
                                                         |     
                                                         Remove this semicolon
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/34080304)
 A Method for Testing Primality</h3>

 I would  start  by extracting the method for testing primality, specifically only test for even and then you can test odd numbers less than or equal to the square root of the value.  

  private static boolean isPrime(int n) {
    if (n == 1 || n == 2) {
        return true;
    } else if (n % 2 == 0) {
        return false;
    }
    for (int i = 3; i <= Math.sqrt(n); i += 2) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
  

 Only Mersenne Primes</h3>

 Since we only need the first 6 Mersenne primes we can limit the iteration of values (and  primality  testing) to the Mersenne numbers.  

  public static void printMersennePrimes() {
    int counter = 0;

    for (int i = 2; counter < 6; i++) {
        int val = (int) Math.pow(2, i) - 1;
        if (isPrime(val)) {
            System.out.printf("2^%d - 1 (%d)%n", i, val);
            counter++;
        }
    }
}
  

 Which I ran, and got the results specified in the https://en.wikipedia.org/wiki/Mersenne_prime Wikipedia page, 

 
   The first four Mersenne primes M<sub>2</sub> = 3, M<sub>3</sub> = 7, M<sub>5</sub> = 31 and M<sub>7</sub> = 127 were known in antiquity. The fifth, M<sub>13</sub> = 8191, was discovered anonymously before 1461; the next two (M<sub>17</sub> and M<sub>19</sub>) were found by Cataldi in 1588. 
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/7843148)
 Here is very elegant answer - which uses brute force (not some fancy algorithm) but in a smart way - by lowering the limit as we find primes and devide composite by those primes... 

 It also prints only the primes - and just the primes, and if one prime is more then once in the product - it will print it as many times as that prime is in the product. 

      public class Factorization {
    public static void main(String[] args) {
    long composite = 600851475143L;
    int limit = (int)Math.sqrt(composite)+1;
    for (int i=3; i<limit; i+=2)
    {
        if (composite%i==0)
        {
            System.out.println(i);
            composite = composite/i;
            limit = (int)Math.sqrt(composite)+1;
            i-=2;   //this is so it could check same prime again
        }
    }
    System.out.println(composite);
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/28970343)
      Scanner reader = new Scanner(System.in);
    System.out.println("Enter the a number");
    int num = reader.nextInt();
    int counter = 0;
    int root = 0;
    boolean prime_flag;

    if (2 <= num) {
        // 2 is the only even prime number
        counter++;
    }

    for (int i = 3; i < (num + 1); i++) {

        // test only for odd number
        if (i % 2 != 0) {
            prime_flag = true;
            root = (int) (Math.sqrt(i) + 1);

            for (int j = 3; j < (root + 1); j++) {
                if ((i % j == 0) && (i != j)) {

                    prime_flag = false;
                    break;
                }
            }

            if (prime_flag) {
                counter++;
            }

        }

    }

    System.out.println("Count of prime numbers upto " + num + " is "
            + counter);
  



