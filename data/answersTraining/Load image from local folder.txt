Query: Load image from local folder
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14819556)
  URL imgURL =
   new File( "F:/SwingExample/resource/images/logo1.png" ).toURI().toURL();
  

 But I suggest to put resource into src. 

 If resource is in src, you may access them by class loader easily. 

  getClassLoader().getResourceAsStream( "resource/images/logo1.png" );
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/21288533)
 You need to get it from the classpath instead of from the local disk file system. 

 Assuming that images is actually a package and that this package is inside the same JAR as the current class, then do so: 

  BufferedImage myPicture = null;
try {
    myPicture = ImageIO.read(getClass().getResource("/images/Report.png"));
} catch (IOException e1) {

    e1.printStackTrace();
}

JLabel headerImage = new JLabel(new ImageIcon(myPicture));
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/45754564)
 I know that this is an old question but I recently encountered the same thing and I thought I'd share my solution: 

 
 Set the value in your  local.properties  file. 
 Read the value in your Gradle build script and set it to a  BuildConfig  constant. 
 Access the  BuildConfig  constant in your Java code. 
 

  local.properties  

  username=myUsername
  

  build.gradle : 

  def getUsername() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("username");
}

android {
    defaultConfig {
        buildConfigField "String", "USERNAME", "\""+getUsername()+"\""
    }
}
  

 Example Java class: 

  package your.package.name;

class MyClass {
    String getUsername() {
        return BuildConfig.USERNAME; // Will return "myUsername"
    }
}
  



