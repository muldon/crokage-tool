Query: Stopping a Thread with interrupt()
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/14246904)
 Stopping threads in Java is a cooperative process implemented with interruptions. You could store your threads and interrupt them one by one: 

  List<Thread> threads = new ArrayList<> ();

for (int n = 1; n <= m; n++) {
  Thread t = new HTTP(n + 1, str, j, k);
  threads.add(t);
  t.start();
}

//later on

for (Thread t : threads) {
    t.interrupt();
}
  

 However, it is worth noting a few things: 

 
 this will only work if your  run  method reacts to interruption by stopping what it is doing 
 you could do the same thing more easily with a thread pool, for example by using one of the http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html returned by the various factory methods provided by the http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html class. They would indeed handle the lifecycle of threads for you. 
 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8581317)
 After you  interrupt()  the thread which is currently waiting, the native wait method will actually reset the interruption flag.  So when you evaluate the  isInterrupted()  here, it is actually reset and will appear as not interrupted. 

  if( Thread.currentThread().isInterrupted()){
     break;
}
  

 You will have to re-interrupt the thread after an interruption occurs during the  wait ing 

  public synchronized void add(Object boar) {
    /** If there's no free space available wait **/
    while (!hasFreeSpace()) {
     try{
         wait();
     }catch(InterruptedException e){ 
        Thread.currentThread().interrupt(); 
        return; //or rethrow
     }
    }
    /** Once there's free space available add new item **/
    boars.add(boar);
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/25003107)
 Where in your  TextHandler  do you do anything, like sleeping, that would catch an  InterruptedException ? If you don't do that, the interrupt bit will be raised but you'll never see it. If you aren't otherwise doing anything that would notice that the thread has been interrupted, you can add this to your loop: 

  for(;;)
{
    // getClipboardContent();
    // evaluate
    // paste
    if (Thread.currentThread().interrupted())
    {
        break;
    }
}
  



