Query: building lucene search query
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25293986)
 Here is how you can use Snowball Stemmer in JAVA:  

  import org.tartarus.snowball.ext.EnglishStemmer;

EnglishStemmer english = new EnglishStemmer();
String[] words = tokenizer("bank banker banking");
for(int i = 0; i < words.length; i++){
        english.setCurrent(words[i]);
        english.stem();
        System.out.println(english.getCurrent());
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13620348)
 MultiFieldQueryParser allows you to search for a "WORD" in more then one Fileds with same Analyzer.  

 e.g.  

   Query query = MultiFieldQueryParser.parse("development",
        new String[]{"title", "subject"},
        new SimpleAnalyzer());
  

 it will look for word development in Field : "title" and Field : "subject"  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/39869831)
 use this: 

  String queryString="Name:alivaliolah";
Query QueryObj=new QueryParser("", perFieldAnalyzor).parse(queryString);
TopDocs topDocFounded = searcher.search(QueryObj, hitsPerPage);
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11791653)
 . Here is how you are suppose to use it. 

 
 Build your query in  BooleanQuery  with your fields and parameters. 
 Pass the  BooleanQuery  String to be parsed using the  QueryParser . 
 

 Here is the snippet for the same. 

  BooleanQuery b = new BooleanQuery();

Set<String> fields = params.keySet();
StandardAnalyzer analyzer = new StandardAnalyzer(version);

b.add(new TermQuery(new Term("cs-method", "GET"), BooleanClause.Occur.SHOULD);
b.add(new TermQuery(new Term("cs-uri", "/blank"), BooleanClause.Occur.SHOULD);

Query q = new QueryParser(version, "cs-method", analyzer).parse(b.toString());
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/50379562)
 micpalmia is correct. For creating small index of less than questions should would not need Elastic Search or Solr. You should go with lucene-core and lucene. 

 If you are using maven in your java project, you can include following dependency in you pom.xml. 

  <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-core -->
<dependency>
    <groupId>org.apache.lucene</groupId>
    <artifactId>lucene-core</artifactId>
    <version>7.3.1</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser -->
<dependency>
    <groupId>org.apache.lucene</groupId>
    <artifactId>lucene-queryparser</artifactId>
    <version>7.3.1</version>
</dependency>
  

 Once you have these libraries, you can index your questions as documents following https://www.tutorialspoint.com/lucene/lucene_indexing_process.htm. Where your document could be simple object containing Question Id, Title and Description. 

  private org.apache.lucene.document.Document createDocument
    (String id, String title, String description){
    Document document = new Document();
    document.add(new StringField("id", id, Field.Store.YES));
    document.add(new StringField("title", title, Field.Store.YES));
    document.add(new StringField("description", description, Field.Store.YES));
    return document;
}
  

 While searching for duplicate question your would follow <a href="https://www.tutorialspoint.com/lucene/lucene_search_operation.htm"  

  import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;

private static TopDocs searchByTitle(String title, IndexSearcher searcher) 
throws Exception {
    QueryParser qp = new QueryParser("title", new StandardAnalyzer());
    qp.setAllowLeadingWildcard(true);
    Query titleQuery = qp.parse(title);
    TopDocs hits = searcher.search(firstNameQuery, 10);
    return hits;
}
  

 where you can also tell your searchByTitle function to search over description 

  TopDocs docs = searchByTitle(" ( title:" + enteredText + "~ OR title:*" + enteredText + 
    "* ) OR  ( description:" + enteredText + " )", searcher)
  



