Instantiate unknown class at runtime and call the object's methods

Rank1:java.lang.reflect.Method.invoke
>>>JavaDoc<<<
Invokes the underlying method represented by this Method object, on the specified object with the specified parameters.
>>>Relevant Questions<<<
1.JAVA: Calling Unknown Object Class Method and Passing it's Parameters

>>>Code Snippets<<<
/**********code snippet1**********/
SO questionId >||13796536||< - AnswerId: >||13796583||<
 Class c = Class.forName(className); 
Method m = c.getDeclaredMethod(methodName, params);
Object i = c.newInstance();
String result = (String)m.invoke(i, args);

-----------------------------------------------


Rank2:java.lang.Class.getConstructor
>>>JavaDoc<<<
Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object.
>>>Relevant Questions<<<
1.instantiate class from class object
2.Reflection - Getting New Instance of unknown classes with unknown number of constructor parameters

-----------------------------------------------


Rank3:java.lang.Class.forName
>>>JavaDoc<<<
Returns the Class object associated with the class or interface with the given string name.
>>>Relevant Questions<<<
1.How to create an object of a specified class type at runtime?
2.java - Class whose name is known at compile time and which extends other class at runtime

-----------------------------------------------


Rank4:java.lang.Class.getConstructors
>>>JavaDoc<<<
Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object.
>>>Relevant Questions<<<
1.instantiate class from class object
2.Reflection - Getting New Instance of unknown classes with unknown number of constructor parameters

-----------------------------------------------


Rank5:java.lang.Class.newInstance
>>>JavaDoc<<<
Creates a new instance of the class represented by this Class object.
>>>Relevant Questions<<<
1.instantiate class from class object

>>>Code Snippets<<<
/**********code snippet1**********/
SO questionId >||3036777||< - AnswerId: >||3036797||<
 Object foo(Class type)
throws InstantiationException, IllegalAccessException {
    return type.newInstance();
}

-----------------------------------------------


