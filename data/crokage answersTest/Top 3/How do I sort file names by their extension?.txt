Query: How do I sort file names by their extension?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/12771571)
 http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#sort%28java.util.List%29 method expects the element of the list it is sorting to be comparable. Either the element type  T  should implement the http://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html interface, or you should use the overloaded http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#sort%28java.util.List,%20java.util.Comparator%29 method, that takes a generic http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html instance.  

 In the code below, you are satisfying neither of the above conditions. Neither your  Person  class implements  Comparable , nor you are passing any  Comparator  instance. 

  ArrayList<Person> nameFromText = new ArrayList<Person>();
fillArrayList(nameFromText, pullFile);
// Sort ArrayList
Collections.sort(nameFromText);  // How to sort?
  

 You should create a  Comparator  for your  Person  class to tell the  sort()  method how to sort it (may be on String stored in Person class) 

 Here's how you implement a generic comparator: 

  public class PersonNameComparator implements Comparator<Person> {
    public int compare(Person p1, Person p2) {
        return p1.getName().compareTo(p2.getName());
    }
}
  

 And then your  Collections.sort()  method invocation should be like: - 

  Collections.sort(nameFromText, new PersonNameComparator());
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/440472)
  Arrays.sort(filenames, new Comparator<String>() {
    @Override
    public int compare(String s1, String s2) {
        // the +1 is to avoid including the '.' in the extension and to avoid exceptions
        // EDIT:
        // We first need to make sure that either both files or neither file
        // has an extension (otherwise we'll end up comparing the extension of one
        // to the start of the other, or else throwing an exception)
        final int s1Dot = s1.lastIndexOf('.');
        final int s2Dot = s2.lastIndexOf('.');
        if ((s1Dot == -1) == (s2Dot == -1)) { // both or neither
            s1 = s1.substring(s1Dot + 1);
            s2 = s2.substring(s2Dot + 1);
            return s1.compareTo(s2);
        } else if (s1Dot == -1) { // only s2 has an extension, so s1 goes first
            return -1;
        } else { // only s1 has an extension, so s1 goes second
            return 1;
        }
    }
});
  

 For completeness: http://java.sun.com/javase/6/docs/api/java/util/Arrays.html and http://java.sun.com/javase/6/docs/api/java/util/Comparator.html. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/20180856)
 Sort objects by name using a comparator the second parameter required. 

  Collections.sort(employees, new EmployeeNameComparator());
  

 See the http://www.mkyong.com/java/java-object-sorting-example-comparable-and-comparator/ of using a custom comparator.  



