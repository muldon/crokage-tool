Query: How do I convert Map into JSON?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/35349852)
 . But do you need the gson library: 

  Map<String, Object> map = new HashMap<>();
String value = new Gson().toJson(map);
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40882429)
 You can convert  Map  to  JSON  using  Jackson  as follows: 

  Map<String,Object> map = new HashMap<>();
//You can convert any Object.
String[] value1 = new String[] { "value11", "value12", "value13" };
String[] value2 = new String[] { "value21", "value22", "value23" };
map.put("key1", value1);
map.put("key2", value2);
map.put("key3","string1");
map.put("key4","string2");

String json = new ObjectMapper().writeValueAsString(map);
System.out.println(json);
  

 Maven Dependencies for  Jackson  :  

  <dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.5.3</version>
    <scope>compile</scope>
</dependency>

<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.5.3</version>
    <scope>compile</scope>
</dependency>
  

  If you are using  JSONObject  library, you can convert map to  JSON  as follows: 

  Map<String, Object> map = new HashMap<>();
// Convert a map having list of values.
String[] value1 = new String[] { "value11", "value12", "value13" };
String[] value2 = new String[] { "value21", "value22", "value23" };
map.put("key1", value1);
map.put("key2", value2);

JSONObject json = new JSONObject(map);
System.out.println(json);
  

  Maven Dependencies for  JSONObject  : 

  <dependency>
    <groupId>org.json</groupId>
    <artifactId>json</artifactId>
    <version>20140107</version>
</dependency>
  

  Hope this will help. . 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/44390770)
 You can use gson 

      <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
    <dependency>
        <groupId>com.google.code.gson</groupId>
        <artifactId>gson</artifactId>
        <version>2.8.1</version>
    </dependency>

JsonParser jsonParser = new JsonParser();
            JsonObject jo = (JsonObject)jsonParser.parse(str);
            JsonArray jsonArr = jo.getAsJsonArray("netStatLinks");

    List<NetStatLink> users = new ArrayList<NetStatLink>();
       Gson gson = new Gson();
       Type listType = new TypeToken<List<NetStatLink>>(){}.getType();
       netStatLink = gson.fromJson(jsonArr ,listType);
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/11240607)
 Converting from String to JSON Map: 

  Map<String,String> map = new HashMap<String,String>();

ObjectMapper mapper = new ObjectMapper();

map = mapper.readValue(string, HashMap.class);
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/48245094)
 This is what worked for me: 

      public static Map<String, Object> toMap(JSONObject jsonobj)  throws JSONException {
        Map<String, Object> map = new HashMap<String, Object>();
        Iterator<String> keys = jsonobj.keys();
        while(keys.hasNext()) {
            String key = keys.next();
            Object value = jsonobj.get(key);
            if (value instanceof JSONArray) {
                value = toList((JSONArray) value);
            } else if (value instanceof JSONObject) {
                value = toMap((JSONObject) value);
            }   
            map.put(key, value);
        }   return map;
    }

    public static List<Object> toList(JSONArray array) throws JSONException {
        List<Object> list = new ArrayList<Object>();
        for(int i = 0; i < array.length(); i++) {
            Object value = array.get(i);
            if (value instanceof JSONArray) {
                value = toList((JSONArray) value);
            }
            else if (value instanceof JSONObject) {
                value = toMap((JSONObject) value);
            }
            list.add(value);
        }   return list;
}
  

 Most of this is from this question: https://stackoverflow.com/questions/41243880/how-to-convert-jsonobject-to-new-map-for-all-its-keys-using-iterator-java 



