Query: How do I convert milliseconds value to date?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/9027387)
  DateFormat df = new SimpleDateFormat("HH:mm:ss");
String formatted = df.format(aDateObject);
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/16520928)
  long second = (millis / 1000) % 60;
long minute = (millis / (1000 * 60)) % 60;
long hour = (millis / (1000 * 60 * 60)) % 24;

String time = String.format("%02d:%02d:%02d:%d", hour, minute, second, millis);
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28059616)
  public static String timeDifference(long timeDifference1) {
long timeDifference = timeDifference1/1000;
int h = (int) (timeDifference / (3600));
int m = (int) ((timeDifference - (h * 3600)) / 60);
int s = (int) (timeDifference - (h * 3600) - m * 60);

return String.format("%02d:%02d:%02d", h,m,s);
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/4142428)
 I'll show you three ways to (a) get the minute field from a long value, and (b) print it using the Date format you want. One uses http://download.oracle.com/javase/6/docs/api/java/util/.html, another uses http://www.joda.org/joda-time/, and the last uses the java.time framework built into Java 8 and later.  

 The java.time framework supplants the old bundled date-time classes, and is inspired by , defined by JSR 310, and extended by the ThreeTen-Extra project. 

 The java.time framework is the way to go when using Java 8 and later. Otherwise, such as Android, use . The java.util.Date/. classes are notoriously troublesome and should be avoided. 

 java.util.Date & . 

  final long timestamp = new Date().getTime();

// with java.util.Date/ api
final  cal = .getInstance();
cal.setTimeInMillis(timestamp);
// here's how to get the minutes
final int minutes = cal.get(.MINUTE);
// and here's how to get the String representation
final String timeString =
    new SimpleDateFormat("HH:mm:ss:SSS").format(cal.getTime());
System.out.println(minutes);
System.out.println(timeString);
  

  

  // with JodaTime 2.4
final DateTime dt = new DateTime(timestamp);
// here's how to get the minutes
final int minutes2 = dt.getMinuteOfHour();
// and here's how to get the String representation
final String timeString2 = dt.toString("HH:mm:ss:SSS");
System.out.println(minutes2);
System.out.println(timeString2);
  

  Output:  

 
   24 
  09:24:10:254 
  24 
  09:24:10:254 
 

 java.time 

  long millisecondsSinceEpoch = 1289375173771L;
Instant instant = Instant.ofEpochMilli ( millisecondsSinceEpoch );
ZonedDateTime zdt = ZonedDateTime.ofInstant ( instant , ZoneOffset.UTC );

DateTimeFormatter formatter = DateTimeFormatter.ofPattern ( "HH:mm:ss:SSS" );
String output = formatter.format ( zdt );

System.out.println ( "millisecondsSinceEpoch: " + millisecondsSinceEpoch + " instant: " + instant + " output: " + output );
  

 
   millisecondsSinceEpoch: 1289375173771 instant: 2010-11-10T07:46:13.771Z output: 07:46:13:771 
 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/26119193)
 You can use the following code to get a long value (milliseconds since January 1, 1970, 00:00:00 GMT) from a String date with the format "dd/mm/yyyy". 

  try {
    String dateString = "30/09/2014";
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    Date date = sdf.parse(dateString);

    long startDate = date.getTime();

} catch (ParseException e) {
    e.printStackTrace();
}
  



