Query: How do I get information regarding class name?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/13335004)
 A simple name omits a lot of information and it is possible to have many classes with the same simple name. That may make this impossible. For example: 

  package stack;

/**
 * 
 * @author Simon Greatrix
 */
public class TestLocal {

    public Object getObject1() {
        class Thing {
            public String toString() { 
                return "I am a Thing";
            }
        }
        return new Thing();
    }

    public Object getObject2() {
        class Thing {
            public String toString() { 
                return "I am another Thing";
            }
        }
        return new Thing();
    }

    public Object getObject3() {
        class Thing {
            public String toString() { 
                return "I am a rather different Thing";
            }
        }
        return new Thing();
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        TestLocal test = new TestLocal();
        Object[] objects = new Object[] {
                test.getObject1(),                
                test.getObject2(),                
                test.getObject3()                
        };

        for(Object o : objects) {
            System.out.println("Object      : "+o);
            System.out.println("Simple Name : "+o.getClass().getSimpleName());
            System.out.println("Name        : "+o.getClass().getName());
        }
    }
}
  

 This produces the output: 

  Object      : I am a Thing
Simple Name : Thing
Name        : stack.TestLocal$1Thing
Object      : I am another Thing
Simple Name : Thing
Name        : stack.TestLocal$2Thing
Object      : I am a rather different Thing
Simple Name : Thing
Name        : stack.TestLocal$3Thing
  

 As you can see, all three local classes have the same simple name. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/27924603)
 Fast example, get list of method names and finding setters: 

  public Map<String, String> getSettersList( Class<T> domainClass, List<Field> fields )
{
    Method[] methods = domainClass.getMethods();
    Map<String, String> setterMap = new HashMap<String, String>();
    for ( int j = 0; j < fields.size(); j++ )
        for ( int i = 0; i < methods.length; i++ )
        {
            if ( methods[i].getName().toLowerCase().equals( "set" + fields.get( j ).getName().toLowerCase() ) )
            {
                if ( methods[i].getParameterTypes().length == 1 )
                    setterMap.put( fields.get( j ).getName(), methods[i].getName() );

            }
        }
    return setterMap;

}
  

 Then invoke methods with some value: 

     T instance = createInstance( domainClass );
   Method setterMethod = instance.getClass().getMethod( setterList.get( field.getName() ), field.getType() );
   Object value = rs.getObject( column );
   if ( value != null )
   {
     value = castTypes( field.getType(), rs.getObject( column ) );
   }
   // invoke setter of "field" with value
   setterMethod.invoke( instance, value );
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30547508)
 
  If you mean the  name  property, you can't with your code as written. You'd need to either make  name  public, or provide a public getter for it  
  If you mean the name of the class, it would be 

  book.getClass().getName()
   
  If you mean the name of the variable you've assigned it to ( book ), you can't, that isn't information available at runtime (outside of a debug build and debugger introspection).  
 


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/33849975)
 You could use  .next()  to get the first name and the last name, and  .nextLine()  right after to get the rest of the line, like this: 

  String firstName = sc.next();
String lastName = sc.next();
String address = sc.nextLine();
  


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/20925261)
 You can use the  Foo.class.getPackage().getName()  method to determine this.  

      public Package getPackage()
  

 Returns: 

 
   the package of the class, or null if no package information is available from the archive or codebase. 
 

 Using getName() : 

      public String getName()
  

 Returns: 

 
   The fully-qualified name of this package as defined in section 6.5.3 of The Javaâ„¢ Language Specification, for example, java.lang 
 



