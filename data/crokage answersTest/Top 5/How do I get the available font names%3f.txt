Query: How do I get the available font names?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/17215863)
 A simpler method that doesn't require making a BufferedImage to get a Graphics object etc.: 

      Font fonts[] = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
    List<Font> monoFonts1 = new ArrayList<>();

    FontRenderContext frc = new FontRenderContext(null, RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT, RenderingHints.VALUE_FRACTIONALMETRICS_DEFAULT);
    for (Font font : fonts) {
        Rectangle2D iBounds = font.getStringBounds("i", frc);
        Rectangle2D mBounds = font.getStringBounds("m", frc);
        if (iBounds.getWidth() == mBounds.getWidth()) {
            monoFonts1.add(font);
        }
    }
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/29583748)
 I'm not sure what exactly is the problem. You got all your TTF files and you have to import and register them. Following tests use  DejaVu Sans  fonts which are not installed on my system. 

 

 Test 1 

  Font f = Font.createFont(Font.TRUETYPE_FONT, new File("dvs.ttf"));

GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
ge.registerFont(f);

Font dvs = new Font("DejaVu Sans", Font.PLAIN, 20);
  

 Here's an image with plain ( dvs ) and derived  bold  ( dvs.deriveFont(Font.BOLD) ) font. 

   

 Test 2 

  Font f = Font.createFont(Font.TRUETYPE_FONT, new File("dvs.ttf"));
Font fb = Font.createFont(Font.TRUETYPE_FONT, new File("dvsb.ttf"));

GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
ge.registerFont(f);
ge.registerFont(fb);

Font dvs = new Font("DejaVu Sans", Font.PLAIN, 20);
Font dvsb = new Font("DejaVu Sans", Font.BOLD, 20);
  

 And here's an image with plain ( dvs ) and truly  bold  ( dvsb ) font. 

   

 You can confirm that correct file is used by looking at  font2DHandle . 

  
  

 

 I also tested  italic  and   bold italic   and both worked as well as  Font#createFont(int, InputStream)  method. 

 Above approach works because fonts are mapped by their full name (e.g. Arial, Arial Bold etc.), so as long as your fonts are correctly named you can register multiple members of one family. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13078469)
 This code will get the system fonts if they are available, and will get default families if for some reason they are not available: 

  static String[] AS_System_Fonts = null;
public static String[] getFontFamilies(){
    if( AS_System_Fonts != null ) return AS_System_Fonts;
    java.awt.GraphicsEnvironment gEnv = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment();
    AS_System_Fonts = gEnv.getAvailableFontFamilyNames();
    if( AS_System_Fonts == null ){ // should not happen
        AS_System_Fonts = new String[8];
        AS_System_Fonts[0] = "Serif";
        AS_System_Fonts[1] = "Sans-Serif";
        AS_System_Fonts[2] = "Monospaced";
        AS_System_Fonts[3] = "Dialog";
        AS_System_Fonts[4] = "Dialog Input";
        AS_System_Fonts[5] = "Lucida Bright";
        AS_System_Fonts[6] = "Lucida Sans";
        AS_System_Fonts[7] = "Lucida Sans Typewriter";
    }
    return AS_System_Fonts;
}
  


-------------------------------------next answer-------------------------------------

Rank:4 (https://stackoverflow.com/questions/5924416)
 There are two paths for fonts on Mac OS X (that I know of),  /Library/Fonts  and  /System/Library/Fonts . 

 If you're just looking for a list of fonts, you can use: 

  java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts()
  

 A bit heavy handed, since it creates a  GraphicsEnvironment  object, but it will return an array of  java.awt.Font  containing an object that represents each font available on the system. 


-------------------------------------next answer-------------------------------------

Rank:5 (https://stackoverflow.com/questions/375632)
  Font f = new Font("Helvetica", Font.PLAIN, 10);  // make a new font object

ObjectName.setFont(f); // set the objects font using setFont();
  

 where "Helvetica" is the font, Font.PLAIN defines the style, and 10 defines the size. Of course it must be installed to work, and you can bundle it using CreateFont(). 

 Try the http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Font.html for more reference. 



