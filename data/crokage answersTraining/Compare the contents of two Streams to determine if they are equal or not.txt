Query: Compare the contents of two Streams to determine if they are equal or not
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/46728479)
  public static boolean equalStreams(Stream<?>...streams) {
    List<Iterator<?>>is = Arrays.stream(streams).map(Stream::iterator).collect(Collectors.toList());
    while(is.stream().allMatch(Iterator::hasNext))
        if(is.stream().map(Iterator::next).distinct().limit(2).count()>1) return false;
    return is.stream().noneMatch(Iterator::hasNext);
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/40008027)
 This is not a use case where streams can do anything useful for you.  There is no built-in way to do this operation that is better than converting the streams to  Iterator s and comparing them in a more traditional style, or not using streams in the first place. 

 To do that more traditionally, with two  Collection s, I'd write 

  Iterator<String> itr1 = collection1.iterator();
Iterator<String> itr2 = collection2.iterator();
for (int i = 0; itr1.hasNext() && itr2.hasNext(); i++) {
  if (!itr1.next().equals(itr2.next())) {
    System.out.println(i);
    break;
  }
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/10976656)
 In this way you are not comparing contents... you are comparing references. 

 If you want to compare contents then use 

  publisher.equals("Niho books")

or 

publisher.equalsIgnoreCase("Niho books")
  



