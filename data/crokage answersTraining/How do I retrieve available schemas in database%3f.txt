Query: How do I retrieve available schemas in database?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25640847)
 "YES" 

 If you have an xsd you also could generate automatically these classes by  <artifactId>maven-jaxb2-plugin</artifactId> maven plugin. 

 An example of your Class 

  import java.io.Serializable;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "objectFromSchema1", propOrder = {

})
@XmlRootElement(name = "objectFromSchema1")
public class ObjectFromSchema1
implements Serializable
{

    private final static long serialVersionUID = 12343L;
    protected String element1;
    protected String element2;
    protected String commonElement1;
    protected String commonElement2;
    public String getElement1() {
        return element1;
    }
    public void setElement1(String element1) {
        this.element1 = element1;
    }
    public String getElement2() {
        return element2;
    }
    public void setElement2(String element2) {
        this.element2 = element2;
    }
    public String getCommonElement1() {
        return commonElement1;
    }
    public void setCommonElement1(String commonElement1) {
        this.commonElement1 = commonElement1;
    }
    public String getCommonElement2() {
        return commonElement2;
    }
    public void setCommonElement2(String commonElement2) {
        this.commonElement2 = commonElement2;
    }

}
  

 Main method to use it 

  public static void main(String[] args) throws JAXBException {
        final JAXBContext context = JAXBContext.newInstance(ObjectFromSchema1.class);
        final Marshaller m = context.createMarshaller();
        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

        final ObjectFromSchema1 objectFromSchema1 = new ObjectFromSchema1();

        objectFromSchema1.setCommonElement1("commonElement1");
        objectFromSchema1.setCommonElement2("commonElement2");
        objectFromSchema1.setElement1("element1");
        objectFromSchema1.setElement2("element2");

        m.marshal(objectFromSchema1, System.out);
    }
  

 output 

  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<objectFromSchema1>
    <element1>element1</element1>
    <element2>element2</element2>
    <commonElement1>commonElement1</commonElement1>
    <commonElement2>commonElement2</commonElement2>
</objectFromSchema1>
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/3496383)
 I don't know a high level API for schema comparison I used http://download.oracle.com/javase/6/docs/api/java/sql/DatabaseMetaData.html it's not to hard to find differences i.g to retieve all tables you can do something like this: 

  DatabaseMetaData meta = con.getMetaData();
  ResultSet res = meta.getTables(null, null, null, 
     new String[] {"TABLE"});
  System.out.println("List of tables: "); 
  while (res.next()) {
     System.out.println(
        "   "+res.getString("TABLE_CAT") 
       + ", "+res.getString("TABLE_SCHEM")
       + ", "+res.getString("TABLE_NAME")
       + ", "+res.getString("TABLE_TYPE")
       + ", "+res.getString("REMARKS")); 
  }
  res.close();
  

 The following methods are also important for your intention: 

  getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) 
getExportedKeys(String catalog, String schema, String table)
getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) 
getPrimaryKeys(String catalog, String schema, String table) 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/22368314)
 If both schemas are consistent, you may create the same object for each row of both  ResultSet s and them put all of them in a single  List . 

 For example, 

  List<T> results = new ArrayList<T>();
while(resultSet1.next()) {
    // retrieve fields here...
    results.add(new T(...fields...));
}

while(resultSet2.next()) {
    // retrieve fields here...
    results.add(new T(...fields...));
}
  



