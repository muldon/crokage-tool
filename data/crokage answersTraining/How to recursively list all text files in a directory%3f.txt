Query: How to recursively list all text files in a directory?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1455441)
 Try a class with a recursive method something like this: 

  public class Searcher {

    private String toFind, toReplace;
    // whatever other info you need

    public void searchInTextFiles(File dir) {
        File[] a = dir.list();
        for (File f : a) {
            if (f.isDirectory()) {
                searchInTextFiles(f);
            } else if (f.name().endsWith(".txt")) {
                searchInFile(f);
            }
        }
    }

    private void searchInFile(File f) {
        // do whatever you need to do on f using fields from this class
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/13444760)
 This is a http://en.wikipedia.org/wiki/Recursion_%28computer_science%29 

  public void find_files(File root)
{
    File[] files = root.listFiles(); 
    for (File file : files) {
        if (file.isFile()) {
            ...
        } else if (file.isDirectory()) {
            find_files(file);
        }
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/13544215)
 using the java.nio.file capabilites of java 7. I implemented similiar func. and added some test. 

  . 

              "c:/"  "c:/windows"
file.io   36272ms       14082ms
file.nio   7167ms        2987ms  
  

 Read more in the javadoc, it's quite powerfull API 

 http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html#visitFileFailed%28T,%20java.io.IOException%29 

  public static void main(String[] args) {
    long starttime = System.currentTimeMillis();
    try {
        Path startPath = Paths.get("c:/");
        Files.walkFileTree(startPath, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult preVisitDirectory(Path dir,
                    BasicFileAttributes attrs) {
                System.out.println("Dir: " + dir.toString());
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
                if (file.toString().endsWith(".txt")){
                    System.out.println(file.toString());    
                }
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException e) {
                return FileVisitResult.CONTINUE;
            }
        });
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    long completetime = System.currentTimeMillis() - starttime;
    System.out.println("totaltime=" + completetime);

}
  



