Query: List XML element Attributes
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/38482173)
 Use DOM parser to get the attributes 

  import java.io.ByteArrayInputStream;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;



public class GetAttributes {

    public static void main(String[] args) throws Exception {
        // TODO Auto-generated method stub
        String xml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<subtests>\n" +
                "        <subtest id=\"Detect\" name=\"Device detection\" />\n" +
                "        <subtest id=\"DeviceType\" name=\"Device type\" />\n" +
                "        <subtest id=\"VendorName\" name=\"Vendor\" />\n" +
                "        <subtest id=\"VendorModelName\" name=\"Vendor model name\" />\n" +
                "        <subtest id=\"ModelName\" name=\"Customer model name\" />\n" +
                "        <subtest id=\"Serial\" name=\"Serial number\" />\n" +
                "        <subtest id=\"getScannedSerial\" name=\"Scanned serial number value\" />\n" +
                "        <subtest id=\"ScannedSerial\" name=\"Scanned serial number\" />\n" +
                "        <subtest id=\"FirmwareVersion\" name=\"Software version\" />\n" +
                "        <subtest id=\"IR_C\" name=\"IR_C\" customer=\"Rogers\" />\n" +
                "        <subtest id=\"EchoDct\" name=\"Echo_DCT\" customer=\"Rogers\" />\n" +
                "        <subtest id=\"FirmwareValidation\" name=\"Firmware validation\" />\n" +
                "</subtests>";


        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        ByteArrayInputStream bis = new ByteArrayInputStream(xml.getBytes());
        org.w3c.dom.Document doc = db.parse(bis);
        NodeList nodeList = doc.getElementsByTagName("subtest");
        for(int x=0,size= nodeList.getLength(); x<size; x++) 
        {
            System.out.println(nodeList.item(x).getAttributes().getNamedItem("id").getNodeValue()+ " ========== "+ nodeList.item(x).getAttributes().getNamedItem("name").getNodeValue());
        }



    }
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/18509098)
 You could iterate over the list marshalling each item individually.  You will need to set the  JAXB_FRAGMENT  property on the  Marshaller  to prevent the XML header from being written out.  You will only need to create the  JAXBContext  and  Marshaller  once for this use case. 

  import java.io.FileOutputStream;
import java.util.*;
import javax.xml.bind.*;

public class Demo {

    public static void main(String[] args) throws Exception {
        JAXBContext jc = JAXBContext.newInstance(Element.class);
        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true);

        List<Element> elements = new ArrayList<>();
        elements.add(new Element());
        elements.add(new Element());

        try(FileOutputStream fos = new FileOutputStream("src/forum18509018/out.txt")) {
           for(Element element : elements) {
               marshaller.marshal(element, fos);
           }
        }
    }

}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/17776302)
 The  @XmlValue  can be applied to a  List  property.  With this mapping the list items will be represented as a space separated list in the XML.  You can do the following: 

  Element  

  import java.util.List;
import javax.xml.bind.annotation.*;

@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
public class Element {

    @XmlAttribute
    private String attribute1;

    @XmlAttribute
    private String attribute2;

    @XmlAttribute
    private String attribute3;

    @XmlValue
    private List<String> value;

}
  

    

  import java.io.File;
import javax.xml.bind.*;

public class  {

    public static void main(String[] args) throws Exception {
        JAXBContext jc = JAXBContext.newInstance(Element.class);

        Unmarshaller unmarshaller = jc.createUnmarshaller();
        File xml = new File("src/forum17775900/input.xml");
        Element element = (Element) unmarshaller.unmarshal(xml);

        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.marshal(element, System.out);
    }

}
  

  input.xml/Output  

  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<element attribute1="a" attribute2="b" attribute3="c">a b c d e f g</element>
  



