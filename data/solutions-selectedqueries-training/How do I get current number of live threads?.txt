Query: How do I get current number of live threads?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1922348)
      public class MainClass {

        public static void main(String args[]) {

          Thread t = Thread.currentThread();
          t.setName("My Thread");

          t.setPriority(1);

          System.out.println("current thread: " + t);

          int active = Thread.activeCount();
          System.out.println("currently active threads: " + active);
          Thread all[] = new Thread[active];
          Thread.enumerate(all);

          for (int i = 0; i < active; i++) {
             System.out.println(i + ": " + all[i]);
          }
       }
   }
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/14791190)
 
   now, i want to only launch a new thread if my thread count is < X 
 

 Sounds to me that what you need is a thread-pool executor.  Updates to your database can be submitted to the pool for execution and you can limit the number of concurrent requests to the database by limiting the number of threads assigned to the pool: 

  // create a thread pool with a max of 4 concurrent threads
ExecutorService threadPool = Executors.newFixedThreadPool(4);

// submit your database operation to the thread-pool
threadPool.submit(new DatabaseUpdateJob(databaseConnection, updateStatement));

...
public class DatabaseUpdateJob implements Runnable {
    // you can construct your jobs and pass in context for them if necessary
    public DatabaseUpdateJob(Connection dbConnection, String statement) {
        ...
    }
    public void run() {
        // use the connection here to update the database
    }
}
  

 If you really want to do it yourself then  Thread.activeCount()  should definitely work.  It returns the number of active threads in the current thread-group.  What you need to do is take a snapshot of the number of threads before your start your database work.  There are a number of system threads that run in the background doing various tasks that you should ignore.  Then whenever you take a new count, you can subtract the background threads and only track you database threads. 

 But a thread-pool is always a good idea. 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/1922300)
  java.lang.Thread.activeCount()
  

 It will return the number of active threads in the  current thread's thread group . 

 docs: http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#activeCount() 



