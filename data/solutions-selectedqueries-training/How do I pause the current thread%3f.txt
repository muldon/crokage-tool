Query: How do I pause the current thread?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/1538514)
 Based on your comments it sounds like you are doing something like this: 

  Thread thread = new Thread(new Runnable(){
    public void run() { // do stuff }});

thread.start();
...
thread.wait();
  

 There are two problems.  First, as others have said,  obj.wait()  can only be called if the current thread holds the primitive mutex for  obj .  If the current thread does not hold the mutex, you get the exception you are seeing. 

 The second (more important) problem is that  thread.wait()  does not do what you seem to be expecting it to do.  Specifically,  thread.wait()   does not  cause the nominated thread to wait.  Rather it causes  the current thread  to wait until some other thread calls  thread.notify()  or  thread.notifyAll() . 

 There is actually no safe way to force a Thread instance to pause if it doesn't want to.  (The nearest that Java has to this is the deprecated  Thread.suspend()  method, but that method is inherently unsafe, as is explained in the Javadoc.) 

 If you want the newly started Thread to pause, the best way to do it is to create a CountdownLatch instance and have the thread call  await()  on the latch to pause itself.  The main thread would then call  countDown()  on the latch to let the paused thread continue. 


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/19552281)
 If you're trying to just pause for a second, http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait%28long%29 is the wrong method. You want http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#sleep%28long%29 instead. 

  try {
    Thread.sleep(1);  // Pause for 1 millisecond.
}
catch (InterruptedException e) {
}
  

 
   sleep()  pauses the current thread for the specified interval. Note that the time is specified in milliseconds, so 1 means 1 millisecond. To pause for 1 second pass 1000.  
   wait()  is a synchronization-related method used to coordinate activity among different threads. It needs to be called from inside a  synchronized  block in tandem with some other thread calling  notify()  or  notifyAll() . It should  not  be used to simply add a delay to your program.  
 


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/26196010)
  I am printing  current Date and Time for you  using java.util.Date  : 

  import java.util.Date;               //importing this package just to use Date()

public class StackOverflowQ {

 public interface CallBackInt{
    String doJob(String str);
    }

public static void main(String[] args) {

    CallBackInt variable = new CallBackInt(){       //using the interface
        public String doJob(String str) {       //doJob method from interface
            return (str + new Date().toString()); 
                  //used .toString() as return type of doJob is String
        }
    };


    while (true) {                            //infinite loop

        System.out.println(variable.doJob("Current Date Instance is: "));
        try {
            Thread.sleep(60*1000);            
            //time is in miliseconds and 60*1000 mili sec=60 seconds = 1 minute
        }
        catch (InterruptedException e) {   
         //if there are any Exception thrown, this will catch it and help you !

            e.printStackTrace();
        }
    }

}
}
  

 And,  thread  is a thread of execution in any program.
Any process that is currently in execution can be treated as a thread.  So, here in this program   Thread.sleep  refers to the current thread (which is main() method currently). So it pauses the main() thread for 60 seconds and resumes it after the pause and then again prints the current Date. 



