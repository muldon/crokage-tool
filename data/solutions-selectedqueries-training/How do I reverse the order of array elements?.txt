Query: How do I reverse the order of array elements?
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/44613893)
 You can sort all the elements first and then generate pair or  n  elements, e.g.; 

  int[][] a={{3 ,1},{0,2}};
int count = a[0].length;

//Sort the elements
List<Integer> sortedElements = Arrays.stream(a)
    .flatMapToInt(e -> Arrays.stream(e))
    .boxed()
    .sorted()
    .collect(Collectors.toList());

//Now, generate 2D arrays
int[][] arrays = new int[a.length][];
int[] temp = new int[count];
int index = 0;
for(int i = 0; i < sortedElements.size() ; i++){
    if(i % count == 0 && i != 0){
        arrays[index++] = temp;
        temp = new int[count];
    }
    temp[i % count] = sortedElements.get(i);
}
arrays[index++] = temp;

for(int[] e : arrays){
    System.out.println(Arrays.toString(e));
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/2137766)
  public class ArrayHandle {
    public static Object[] reverse(Object[] arr) {
        List<Object> list = Arrays.asList(arr);
        Collections.reverse(list);
        return list.toArray();
    }
}
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/30740839)
 Because the reverse order is not the natural order,  sorted()  can't be used to sort in reverse order.  If you avoid the  IntStream , using a  Stream<Integer>  instead, then you can use a  Collections.reverseOrder()  to sort the stream in a reverse to the natural order.  Then you can call  mapToInt  and convert to  int[]  at the end. 

  int[] arr = in.lines()
            .map(Integer::valueOf)  // Extract Integer, not int
            .sorted(Collections.reverseOrder())  // On Stream<Integer>
            .limit(N)
            .mapToInt(i -> i)       // map Integer to int
            .toArray();
  



