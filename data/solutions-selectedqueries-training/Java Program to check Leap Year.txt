Query: Java Program to check Leap Year
-----------------------------------------------------------------------

Rank:1 (https://stackoverflow.com/questions/25617941)
 Apart from the algorithm you can calculate leap year using java's built in Calendar api.  

  static boolean isLeapYear(int year){
    Calendar calendar= Calendar.getInstance();
    calendar.set(Calendar.YEAR,year);
    return calendar.getActualMaximum(Calendar.DAY_OF_YEAR) > 365;
}
  


-------------------------------------next answer-------------------------------------

Rank:2 (https://stackoverflow.com/questions/8940484)
 Create a calendar, set year and month and use  getActualMaximum  

  int iYear = 1999;
int iMonth = Calendar.FEBRUARY; // 1 (months begin with 0)
int iDay = 1;

// Create a calendar object and set year and month
Calendar mycal = new GregorianCalendar(iYear, iMonth, iDay);

// Get the number of days in that month
int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH); // 28
  

  Test : try a month in a leap year: 

  mycal = new GregorianCalendar(2000, Calendar.FEBRUARY, 1);
daysInMonth= mycal.getActualMaximum(Calendar.DAY_OF_MONTH);      // 29
  

 EDIT: Solution for JAVA 8 

 @Warren M. Nocos. 
If you are trying to use Java 8's new Date and Time API, you can use http://docs.oracle.com/javase/8/docs/api/java/time/YearMonth.html class. 

  // Get the number of days in that month
YearMonth yearMonthObject = YearMonth.of(1999, 2);
int daysInMonth = yearMonthObject.lengthOfMonth(); //28  
  

  Test: try a month in a leap year:  

  yearMonthObject = YearMonth.of(2000, 2);
daysInMonth = yearMonthObject.lengthOfMonth(); //29 
  


-------------------------------------next answer-------------------------------------

Rank:3 (https://stackoverflow.com/questions/28557011)
  new GregorianCalendar().isLeapYear(year);
  



