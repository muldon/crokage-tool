package com.ufu.bot.util;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.DoubleStream;

import com.google.common.primitives.Doubles;
import com.ufu.crokage.config.CrokageStaticData;

public class Matrix {
	

	    // return a random m-by-n matrix with values between 0 and 1
	    public static double[][] random(int m, int n) {
	        double[][] a = new double[m][n];
	        for (int i = 0; i < m; i++)
	            for (int j = 0; j < n; j++)
	                a[i][j] = StdRandom.uniform(0.0, 1.0);
	        return a;
	    }

	    // return n-by-n identity matrix I
	    public static double[][] identity(int n) {
	        double[][] a = new double[n][n];
	        for (int i = 0; i < n; i++)
	            a[i][i] = 1;
	        return a;
	    }

	    // return x^T y
	    public static double dot(double[] x, double[] y) {
	        if (x.length != y.length) throw new RuntimeException("Illegal vector dimensions.");
	        double sum = 0.0;
	        for (int i = 0; i < x.length; i++)
	            sum += x[i] * y[i];
	        return sum;
	    }

	    // return B = A^T
	    public static double[][] transpose(double[][] a) {
	        int m = a.length;
	        int n = a[0].length;
	        double[][] b = new double[n][m];
	        for (int i = 0; i < m; i++)
	            for (int j = 0; j < n; j++)
	                b[j][i] = a[i][j];
	        return b;
	    }

	    // return c = a + b
	    public static double[][] add(double[][] a, double[][] b) {
	        int m = a.length;
	        int n = a[0].length;
	        double[][] c = new double[m][n];
	        for (int i = 0; i < m; i++)
	            for (int j = 0; j < n; j++)
	                c[i][j] = a[i][j] + b[i][j];
	        return c;
	    }

	    // return c = a - b
	    public static double[][] subtract(double[][] a, double[][] b) {
	        int m = a.length;
	        int n = a[0].length;
	        double[][] c = new double[m][n];
	        for (int i = 0; i < m; i++)
	            for (int j = 0; j < n; j++)
	                c[i][j] = a[i][j] - b[i][j];
	        return c;
	    }

	    // return c = a dot b
	    public static double[][] dotProduct(double[][] a, double[][] b) {
	        int m1 = a.length;
	        int n1 = a[0].length;
	        int m2 = b.length;
	        int n2 = b[0].length;
	        if (n1 != m2) throw new RuntimeException("Illegal matrix dimensions.");
	        double[][] c = new double[m1][n2];
	        for (int i = 0; i < m1; i++)
	            for (int j = 0; j < n2; j++)
	                for (int k = 0; k < n1; k++)
	                    c[i][j] += a[i][k] * b[k][j];
	        return c;
	    }

	    // matrix-vector multiplication (y = A * x)
	    public static double[] dotProduct(double[][] a, double[] x) {
	        int m = a.length;
	        int n = a[0].length;
	        if (x.length != n) throw new RuntimeException("Illegal matrix dimensions.");
	        double[] y = new double[m];
	        for (int i = 0; i < m; i++)
	            for (int j = 0; j < n; j++)
	                y[i] += a[i][j] * x[j];
	        return y;
	    }


	    // vector-matrix multiplication (y = x^T A)
	    public static double[] dotProduct(double[] x, double[][] a) {
	        int m = a.length;
	        int n = a[0].length;
	        if (x.length != m) throw new RuntimeException("Illegal matrix dimensions.");
	        double[] y = new double[n];
	        for (int j = 0; j < n; j++)
	            for (int i = 0; i < m; i++)
	                y[j] += a[i][j] * x[i];
	        return y;
	    }
	    
	    
	    // element-wise multiplication
	   
	    

	    // test client
	    public static void main(String[] args) {
	        /*StdOut.println("D");
	        StdOut.println("--------------------");
	        double[][] d = { { 1, 2, 3 }, { 4, 5, 6 }, { 9, 1, 3} };
	        StdArrayIO.print(d);
	        StdOut.println();

	        StdOut.println("I");
	        StdOut.println("--------------------");
	        double[][] c = Matrix.identity(5);
	        StdArrayIO.print(c);
	        StdOut.println();

	        StdOut.println("A");
	        StdOut.println("--------------------");
	        double[][] a = Matrix.random(8, 6);
	        StdArrayIO.print(a);
	        StdOut.println();

	        StdOut.println("A^T");
	        StdOut.println("--------------------");
	        double[][] b = Matrix.transpose(a);
	        StdArrayIO.print(b);
	        StdOut.println();

	        StdOut.println("A + A^T");
	        StdOut.println("--------------------");
	        double[][] e = Matrix.add(a, b);
	        StdArrayIO.print(e);
	        StdOut.println();

	        StdOut.println("A * A^T");
	        StdOut.println("--------------------");
	        double[][] f = Matrix.multiply(a, b);
	        StdArrayIO.print(f);
	        StdOut.println();*/
	        
	        
	        System.out.println(".....from here....");
	        
	        
	        StdOut.println("A");
	        StdOut.println("------4x8-----------");
	        double[][] a =  { { 1, 2, 3 ,1, 1, 2, 4, 5},
	        				  { 2, 1, 2 ,4, 1, 5, 2, 1},
	        				  { 1, 5, 6 ,4, 4, 5, 2, 2},
	        				  { 6, 1, 9 ,4, 1, 2, 2, 1}
	        					};
	        StdArrayIO.print(a);
	        StdOut.println();
	        
	        
	        StdOut.println("B");
	        StdOut.println("-----1x4-------------");
	        double[][] b = { { 2, 2, 2 ,2} };
	        StdArrayIO.print(b);
	        StdOut.println();
	        
	        StdOut.println("B dot A");
	        StdOut.println("--------------------");
	        double[][] c = Matrix.dotProduct(b,a);
	        StdArrayIO.print(c);
	        StdOut.println();
	        
	       
	        /* 
	        
	        //1x8
	        double[][] idf1 = {{2.53365651, 0.36778106, 3.69219869, 4.89921667, 2.329779, 2.17925309, 0.36778106, 5.69025302}};
	        double numerator = 4.8547881009827565;
	        double idfSum = 22.05991910016701;
	           
	        //8x6
	        double[][] dotProduct = {{-8.74708030e-03,-9.49173569e-04,-1.79407540e-01,3.74671331e-02,1.10620335e-02,-2.39550092e-02},
	        		{-1.65991873e-03,1.32750671e-01,-3.95720152e-02,1.00000000e+00,9.98105323e-02,1.00279153e-01},
	        		{-1.85798468e-01,-3.47567323e-01,2.52301853e-01,-2.05768860e-01,4.91026654e-02,7.07769332e-02},
	        		{8.42338642e-02,-1.20632989e-01,-1.58154552e-01,8.17010202e-02,1.29454867e-01,3.26263852e-01},
	        		{-1.04848064e-01,-1.23336895e-01,-6.91721753e-02,5.50900858e-02,-8.61384831e-02,1.99030313e-01},
	        		{-9.19693471e-02,-1.49011563e-02,1.10217510e-01,1.63868803e-01,-1.29026108e-01,8.00056818e-02},
	        		{-1.65991873e-03,1.32750671e-01,-3.95720152e-02,1.00000000e+00,9.98105323e-02,1.00279153e-01},
	        		{3.57187560e-02,-1.60963986e-01,-1.76257287e-01,3.84315082e-02,5.88597136e-02,1.18360822e-01}};
	        
	        //1x8
	        double[] dotProductMax = {0.03746713, 1., 0.25230185, 0.32626385, 0.19903031, 0.1638688, 1., 0.11836082};
	        
	        double[][] idfAndDotProductMax = {{0.09492885, 0.36778106, 0.93154857, 1.5984373,  0.46369664, 0.3571116, 0.36778106, 0.67350302}};  
	        
	        double sim12 = 0.2200;
	        
	        */
	        
	        //6x3
	        /*double[][] matrix1 = {{1,3,1},
	        		              {3,1,2},
	        		              {8,1,4},
	        		              {1,2,4},
	        		              {8,1,2},
	        		              {9,5,4}};*/
	        
	        double[][] matrix1 = {{-3.553396560340869176e-02,-1.002753751676702110e-01,1.170841565474671636e-01,-5.845931731656222458e-02,1.255118257946157279e-01,-9.473121440762585777e-02,-3.613730455728712126e-02,4.880974596075870683e-03,-5.958109431923031690e-02,-1.192873898579481923e-01,-2.694041982197681664e-02,6.616228606832230685e-02,2.161970386367608188e-01,3.561946977000560177e-02,6.967998136804572085e-02,-6.736083625008429387e-02,-8.601874866335540437e-02,7.016610416523695604e-02,-5.293339706495669289e-02,1.411766745776397471e-02,5.607762559706636583e-03,9.720065723903190125e-02,4.317904570693455180e-02,-7.886699381029707578e-02,8.689304578448985017e-02,-2.002234402062594565e-01,-9.118469706652347628e-02,-8.299885416231533863e-02,-6.090582805847623987e-02,-1.224547328846342792e-01,-2.113168609165284872e-02,-5.184658069712207162e-02,-1.723394704724497406e-01,1.206768193178513193e-02,-3.891762271776848248e-02,-3.588408553924356259e-02,-7.520464312647125345e-03,-1.338963292352018108e-01,-3.331759505076044292e-02,1.018516730319035668e-01,1.232121440124745032e-01,5.925362929868102646e-03,4.967975910996707406e-02,-5.561564650749753307e-03,1.578219231756343563e-03,1.984255904770688278e-02,7.454384249491927128e-02,1.808153924880673002e-01,-3.750939840101364525e-02,5.964443983465391418e-03,-3.079544275459170262e-03,9.067763946456312840e-02,-2.321939074723297289e-02,1.673700630381985688e-01,2.344331775057398592e-01,2.184348779621347325e-01,-4.305933498238935508e-02,3.905764460511829822e-02,9.328326450534146080e-03,1.193641426565857366e-01,8.500804107173746960e-02,1.089046397369120150e-01,1.279890621125323869e-01,-1.055226415916996202e-01,9.669686866227109046e-02,6.122508790729651318e-02,-2.061246543333910414e-02,-7.364242306246596148e-02,6.636078763714066409e-02,-4.108664947030122444e-02,1.186671962666631663e-01,-4.800734701355775617e-03,-7.778267201032044997e-02,1.360381440024077127e-01,-1.865332884863659182e-02,-4.454965585343834134e-02,5.886389892689501864e-03,-1.375186272271735483e-02,1.732325542982533426e-02,-5.906393616309982275e-02,-2.854900848126097901e-01,-1.118767135351578235e-01,7.227787813977377962e-02,-1.177973257806492896e-01,9.314373990112674584e-02,9.583447372764868077e-02,1.019841704547666678e-01,-1.354268994695087026e-02,-9.086574292454853430e-02,-1.691116300991158394e-01,-9.597775648801548654e-02,1.481054122109288218e-01,3.178241516483489848e-01,-2.382506937750109716e-03,-1.418723838738615017e-01,-7.288443312966522147e-02,4.481213982694143977e-02,4.691504830296330808e-02,-1.551885338391619136e-02,-1.158731416785977048e-01},
		        	{-1.319809474739644384e-01,-1.415220932237564733e-01,1.048075604353840284e-01,-3.002901525863246879e-02,-1.331816618236506544e-01,8.295271397841078032e-02,1.509226042404380845e-02,-7.175375253023139055e-02,1.011553061906122070e-01,-9.535911121978674077e-02,-2.230117460043355357e-02,1.046911741870340112e-01,1.394511543925997799e-01,1.138227923714285328e-01,-4.739323291385275777e-02,-6.620918249043374060e-02,4.068522959116457199e-02,3.827640730393078172e-02,1.740195653599963255e-01,8.429828218418194963e-02,4.237767287081723594e-02,-2.797118729138330095e-02,-5.615996579500796837e-02,-9.328763251364931286e-02,-7.244884696669644762e-03,2.019408412094093330e-01,5.032052143947463030e-02,-4.868348552909630700e-02,8.385786837113576309e-02,5.723287014175149068e-02,2.635929875760829877e-02,8.915213077485860393e-02,-2.222422783905223798e-01,2.226149513903590005e-02,-1.188444718973708514e-01,-1.044782151021274724e-01,1.256337560977857926e-01,2.125928121245927171e-01,-1.015278766142024836e-02,4.591329522412278957e-02,8.778875749222231351e-02,4.719714492209465401e-02,7.914148274805760108e-02,1.248697142275291966e-01,5.948791713884343108e-02,-8.655125066259801436e-02,-4.045543990373316051e-02,-7.588002780560107463e-02,-3.861347824816186575e-02,7.072764454681924884e-02,-2.920629437671817125e-02,-1.223867320135647169e-01,2.424136920812716700e-01,2.097055283350444249e-02,1.494252042944557712e-01,9.297048835495769215e-02,4.876937423978378039e-02,-1.512911094054233130e-01,9.403748646941181843e-02,-6.371281137694667640e-02,-4.532357898515026323e-02,-3.313561246161074447e-02,-1.369722212409909406e-03,-4.043466821384882059e-02,-1.783276165413844386e-02,1.915126160812478384e-01,9.250175809917117464e-02,1.697572847794761863e-01,1.828430094085043908e-02,1.486927451105730241e-02,1.144866766352564541e-01,7.518693630531458894e-02,-9.020458465733133258e-02,-7.331238239715542893e-02,-8.699430986304988733e-02,1.050627701362840394e-01,1.061787565064913896e-01,-1.416812132762077306e-02,-2.899251738121580435e-02,1.852019526462667098e-01,1.537597201474002473e-01,-4.316549893335077520e-02,-1.616545603333944814e-01,-8.562512212687091451e-02,-1.024880091755921152e-01,1.493364704426197453e-01,4.472840730949725896e-02,2.696700902968921648e-02,8.071278348077982889e-02,1.307817987617224120e-01,-8.223106309164264494e-02,7.595507042792527808e-02,2.013583592951788404e-01,6.234457921948362985e-02,-5.426174376769273694e-02,7.650787001571414392e-02,1.586814580169061684e-02,-1.190776654965558790e-01,-9.054631472264629277e-02,9.222581719901037922e-02},
		        	{-6.594840582054666001e-02,1.226588331496983597e-01,-8.249397427396129578e-02,5.755582827238137078e-02,2.290622160573916807e-02,7.463057836497091757e-02,1.550887178982816028e-01,-6.123585744462731878e-02,7.122716019195683701e-02,-8.315030637394889290e-02,-5.568494513977373904e-03,1.236978833635412819e-02,-9.548236814417970786e-02,-1.757620867215239913e-01,8.803228007692931456e-02,8.263563707079367437e-02,6.730183031659743575e-02,-1.301037693835578254e-02,-6.361592874272681275e-03,-1.699459536735792586e-01,8.660099290517514481e-02,1.811029935452993511e-01,-1.005428041095857844e-01,5.110656817533947710e-02,1.611161564333695451e-01,-9.440169937782995346e-02,2.189326101052495310e-02,1.530347978128853738e-02,-1.229878069704510024e-01,2.384549927996633956e-01,6.067646242530765760e-02,1.359849142087697985e-02,-7.573391519824075602e-02,-8.694109193228824473e-02,-3.182125415092920163e-03,1.196086907643010150e-01,-5.643047050671985004e-02,1.328922330547454567e-01,-2.162558000882425224e-01,-4.856703329127021879e-02,-9.102332668794663184e-02,3.030141797824080149e-02,1.681369877759993636e-01,1.062511089404379327e-01,-8.648930941855170751e-02,1.533348364589270096e-01,1.068986657126362733e-01,-6.103543850430215995e-02,-3.453717048453892879e-02,1.137909192268056827e-02,1.696542015622256594e-01,-4.036811419293134806e-02,-1.291577711484092061e-01,1.511309486835840481e-02,-6.847697613448591736e-02,1.595580951485426058e-01,-3.216248279496286555e-02,-6.062440251782143241e-02,1.016111176550104911e-01,1.247904024940918177e-01,1.375005009794619260e-01,1.392114994296956773e-02,1.211897459781155206e-01,7.944274874141005194e-02,-3.279776466435137261e-02,-1.087707387007508797e-01,-1.985327956032538130e-02,-1.660220787035070755e-01,-6.402104643151702856e-02,-3.014551133737390816e-03,2.413822117519122401e-02,-6.517898810912410405e-03,9.014171833837306136e-02,1.541513550079214034e-01,-8.993124127521831546e-03,1.815043638203134579e-01,-1.697726570133642823e-02,5.720862568167735251e-03,2.202423231881909735e-02,-1.647421108608387585e-01,-5.700789350070281647e-02,1.541441952216498490e-01,1.175452128231928989e-01,5.909933591472935066e-02,-8.367757873678473290e-02,-5.805361241291279173e-02,-1.883910868585487175e-01,8.748745361631001232e-04,2.005215180323161386e-02,-1.856417725315255562e-02,8.014320531909953360e-02,1.081109827542513641e-01,-6.613468418298545926e-02,1.862820708409107517e-01,7.662076028892705892e-02,-8.199430380512370831e-02,-6.723392249757546846e-02,-9.404432507153338838e-02,1.311438316056525999e-01,-6.288864820935512190e-03},
		        	{1.725237674814780395e-02,1.389184833012943043e-01,4.512116479403696645e-02,-1.421910487203050244e-01,1.476714936451469506e-01,-7.680909685385865771e-02,-1.149075827442553460e-01,1.220832324394060045e-02,1.393802336582263164e-02,-1.995054662457099171e-01,3.686142647234859349e-02,5.986753965536349004e-02,-5.495236285559430833e-03,-1.398165955780044933e-01,-4.385574915266528956e-02,6.263184661707843492e-02,8.803134659213279756e-02,2.994121584387699278e-02,2.342920738756466281e-01,7.012705254055139059e-02,2.891316409437126936e-02,1.414359683965308034e-01,-3.666737278799549193e-02,-2.917318464407379214e-02,5.179768064682525874e-02,-6.104474773562663936e-02,-1.704715492452752723e-01,-8.475642700476875013e-02,-8.360995881703907340e-02,5.330919243360406068e-02,3.560817403413579774e-02,2.845490250873580207e-01,7.305722659322107064e-03,-1.059050895566626960e-01,-1.944365022182250810e-02,2.606010085561581702e-02,-1.311020897521313899e-01,1.506932781827291234e-01,1.095539162754287366e-02,1.133752728536031353e-02,-1.077799987946946869e-01,-7.609922364267397710e-02,-1.791331246343119687e-02,8.731920771516445134e-02,-1.742053310557143200e-02,-3.303181702955208798e-02,4.351880438196628099e-03,4.827500991600117836e-02,-1.506375097634918003e-01,3.818872311043640388e-02,1.368688817910682365e-01,-5.963645944594440224e-02,-2.598713933717648403e-02,6.723189157948762651e-02,-1.100894438494839228e-01,1.065825000252909327e-01,7.056244388214881480e-02,-3.465012486715663559e-02,1.401406565871232135e-01,1.679678351498800903e-01,1.926903553688119608e-01,5.546586435262184506e-02,-3.212263603146131574e-02,-3.518405791991485732e-02,-2.944593481338110899e-02,1.436601559758672875e-01,6.368322764395024926e-02,-2.702615360497917160e-02,1.069747198134013144e-01,1.430562734421243209e-01,5.063244991432467451e-02,-7.240700263895390176e-02,7.868446630525295638e-02,2.401805303971144695e-02,-1.952605289938610933e-01,-9.577120311904153971e-02,2.088325514578392994e-01,2.089061855958081471e-01,-9.487080157586243179e-02,1.125839197516479741e-02,-1.235376807193445947e-01,7.483603974110091548e-04,9.868615915485574874e-02,2.725325709893423876e-02,9.964796378087474246e-03,-7.038345333515424150e-03,-1.411553112601445165e-03,-1.797906338251061276e-01,7.679574476618049317e-02,9.040403558321113975e-02,-4.473632612023739630e-02,2.028885536737296547e-01,-3.866688479387166144e-02,2.877025309494718117e-02,3.157508538331590259e-02,3.685028104874096821e-02,1.160560746907449009e-01,5.790508957558118674e-02,6.232044885063727120e-03,1.177858515148539897e-01},
		        	{5.419232938668208654e-02,1.006010644836942414e-01,3.906015038273052270e-02,3.274706264505813924e-02,-9.573848183800008627e-02,8.832317465839523152e-02,2.276040802212680840e-03,-2.727919924677073976e-02,1.079669151207081762e-01,-8.742755482172893944e-02,-1.113817528561912018e-01,7.420119014337199156e-03,-6.987840663451904029e-03,-8.922829740657392539e-02,8.863964921357536664e-02,-7.829499069794132460e-02,6.100050994213696010e-02,6.439105807806963511e-02,2.542890006274577952e-01,-5.579398893268019965e-02,1.223207672264064322e-01,1.716879982215705480e-01,9.721172885618067916e-02,1.399396999555873981e-02,-1.815405853326778618e-01,-1.110029869132032193e-01,3.280805033987064384e-02,9.659238349881534014e-02,-9.741723424653203622e-02,2.333299349752095131e-01,-4.395257533738925848e-04,1.501671961485527840e-01,9.047367170429775063e-02,9.439019219153216289e-02,6.410263879899351369e-02,5.623791488095538499e-02,-2.219194421280083762e-01,5.556007831460794966e-02,-5.858508473555459201e-02,1.098695478439266349e-01,-1.444171263446131781e-01,-1.289295394358775937e-01,-4.138280883745883154e-02,2.237279329373852710e-01,2.077168479831462966e-01,7.882962311953728429e-02,9.212601508799392325e-02,-9.134980515057804576e-03,7.046678989935692417e-02,-2.904774628286111229e-02,-1.991682348144572026e-02,-1.282135975744563838e-01,6.239807376204332956e-02,4.057651291878174721e-02,-1.129742495845017930e-01,1.472271195348000827e-01,1.312367063704381331e-01,-4.980337914553134571e-02,2.484796460622780701e-01,2.865052655320178207e-02,6.864748016323228563e-02,-9.110215523487054379e-02,1.636356016589548407e-02,-9.525105345351726760e-02,3.872452213764524670e-02,-8.592197424570537090e-02,-6.416830648057002262e-02,-8.437170829843114450e-02,-4.728556598207823980e-02,-4.131651025719269843e-02,-8.338859069974831340e-02,-1.215402469694275012e-01,-1.228975244577744765e-03,-5.929641807920398716e-02,-2.130854409512909498e-01,1.445086658013600978e-01,-1.018700038332545459e-02,4.342433292141770901e-02,1.173357828415821751e-02,4.552820753993658265e-02,-1.003414693885000819e-01,1.111290582154147444e-01,-4.459245170303928474e-02,7.260796147400351563e-02,-8.202197541790536006e-02,1.650571322357227005e-02,-1.882002336067915560e-01,-9.409516819179908342e-02,3.408662075223965748e-02,1.344618604717704065e-02,-3.233477528028814996e-02,6.167430851042603364e-03,5.419451781651170308e-02,-1.000296970001160191e-01,6.563930592216883630e-02,1.755859688086613621e-02,9.833548757368841542e-02,3.772492970404013601e-02,-4.340241412084946265e-02,-2.530144521942350941e-02},
		        	{9.130289493348887550e-03,9.996687597846451445e-02,-5.471335599148532958e-02,6.782387278055312940e-02,-1.170381338037744245e-01,1.284937159560215481e-01,1.355173665680842188e-02,-7.792081215074599110e-02,1.155110373986882044e-01,-2.252830032010023215e-02,-6.326562746540677351e-02,4.025867588553808801e-03,1.346692121643306046e-02,-3.680296863848853128e-02,-1.378535770276917150e-01,-1.678339991841934498e-01,3.194888903554066184e-02,9.438046619650421187e-02,5.233661061718222068e-02,-3.554173473533637356e-02,1.175270176634704983e-01,-8.481174305033797878e-02,-6.358541388925594007e-02,-1.338199540814656585e-02,-1.221660017042746904e-01,-4.390592319336429628e-02,7.193325754944429433e-03,-4.519603210126701270e-02,-1.024401472883806341e-01,4.639053480614949154e-02,-1.028388329727020767e-01,-4.623740392811337419e-02,7.088902765356584756e-03,4.491831060859767600e-06,-2.414684573688728741e-02,-6.696930784062779529e-02,-5.927840272915535502e-02,3.737037926695679219e-02,4.779529757906907095e-02,-4.257277999744506214e-02,-1.066674866126310350e-01,-1.854983465719622360e-01,7.075416841315118610e-02,2.084133553586943466e-01,2.786976645808312281e-01,1.473700524645931743e-02,2.240860402114341343e-01,-7.436535243118133458e-03,4.858664469922917804e-03,8.312794260609267238e-02,6.600981175885709332e-03,-1.497275455363977492e-01,-4.799590965220783267e-02,2.888954112418565603e-02,-6.481348223511219919e-02,7.088580054183089840e-02,1.977932582937351746e-01,-3.539315423430307306e-02,2.474535942231212704e-01,-5.526537029635032738e-02,-1.231850470224311461e-01,3.706517060470329583e-02,-2.610525304069257965e-02,-9.958789096628058168e-02,5.065519228035222921e-02,-9.183371744975030171e-02,2.046364320784466867e-02,-3.345434873138155435e-02,-1.694979609964123446e-01,8.714458958798734778e-02,-1.049284562261888487e-01,1.398229337480141367e-02,1.219317734048695617e-01,-1.313794436465046123e-02,-6.222207127365253498e-02,4.794822151727181486e-02,1.122612450580077054e-01,1.156250290562382543e-01,1.654194436030008708e-01,1.136936549926664680e-01,-7.665148000211433055e-02,1.215731144829862304e-01,3.325101654909962817e-02,-1.999700767956811426e-02,-1.394317737756331776e-01,2.090432618168424905e-01,-1.829172642075195809e-01,-4.403340272938757738e-02,9.366197109501879503e-02,1.034392528039254633e-01,7.073368136964684749e-02,-4.811092681159884893e-02,1.241588139050446710e-01,-1.089408632408307709e-01,1.339513033923730827e-02,-2.848706441708332999e-03,2.339107157408471249e-01,-1.331946508849444002e-02,9.080688199653294546e-02,-1.015852351494015218e-02},
		        	{-1.319809474739644384e-01,-1.415220932237564733e-01,1.048075604353840284e-01,-3.002901525863246879e-02,-1.331816618236506544e-01,8.295271397841078032e-02,1.509226042404380845e-02,-7.175375253023139055e-02,1.011553061906122070e-01,-9.535911121978674077e-02,-2.230117460043355357e-02,1.046911741870340112e-01,1.394511543925997799e-01,1.138227923714285328e-01,-4.739323291385275777e-02,-6.620918249043374060e-02,4.068522959116457199e-02,3.827640730393078172e-02,1.740195653599963255e-01,8.429828218418194963e-02,4.237767287081723594e-02,-2.797118729138330095e-02,-5.615996579500796837e-02,-9.328763251364931286e-02,-7.244884696669644762e-03,2.019408412094093330e-01,5.032052143947463030e-02,-4.868348552909630700e-02,8.385786837113576309e-02,5.723287014175149068e-02,2.635929875760829877e-02,8.915213077485860393e-02,-2.222422783905223798e-01,2.226149513903590005e-02,-1.188444718973708514e-01,-1.044782151021274724e-01,1.256337560977857926e-01,2.125928121245927171e-01,-1.015278766142024836e-02,4.591329522412278957e-02,8.778875749222231351e-02,4.719714492209465401e-02,7.914148274805760108e-02,1.248697142275291966e-01,5.948791713884343108e-02,-8.655125066259801436e-02,-4.045543990373316051e-02,-7.588002780560107463e-02,-3.861347824816186575e-02,7.072764454681924884e-02,-2.920629437671817125e-02,-1.223867320135647169e-01,2.424136920812716700e-01,2.097055283350444249e-02,1.494252042944557712e-01,9.297048835495769215e-02,4.876937423978378039e-02,-1.512911094054233130e-01,9.403748646941181843e-02,-6.371281137694667640e-02,-4.532357898515026323e-02,-3.313561246161074447e-02,-1.369722212409909406e-03,-4.043466821384882059e-02,-1.783276165413844386e-02,1.915126160812478384e-01,9.250175809917117464e-02,1.697572847794761863e-01,1.828430094085043908e-02,1.486927451105730241e-02,1.144866766352564541e-01,7.518693630531458894e-02,-9.020458465733133258e-02,-7.331238239715542893e-02,-8.699430986304988733e-02,1.050627701362840394e-01,1.061787565064913896e-01,-1.416812132762077306e-02,-2.899251738121580435e-02,1.852019526462667098e-01,1.537597201474002473e-01,-4.316549893335077520e-02,-1.616545603333944814e-01,-8.562512212687091451e-02,-1.024880091755921152e-01,1.493364704426197453e-01,4.472840730949725896e-02,2.696700902968921648e-02,8.071278348077982889e-02,1.307817987617224120e-01,-8.223106309164264494e-02,7.595507042792527808e-02,2.013583592951788404e-01,6.234457921948362985e-02,-5.426174376769273694e-02,7.650787001571414392e-02,1.586814580169061684e-02,-1.190776654965558790e-01,-9.054631472264629277e-02,9.222581719901037922e-02},
		        	{4.277469337117734832e-02,5.681573846051633792e-02,-3.174421438763384146e-02,-1.040539994856344158e-01,-1.863918071449772659e-02,-1.423351877953604738e-01,8.219110608170333843e-02,-6.030992074309153572e-02,-2.742006771164618231e-02,-1.058868975390006573e-01,-1.199601289370404167e-01,8.109858465350328061e-02,-1.493928673305280619e-01,-1.188041065585668105e-01,9.125188539364711970e-02,-4.746396179456670306e-02,-5.933552764407574315e-02,2.126445469554999121e-02,2.189940230991951620e-01,-2.543096908811320542e-02,4.561316841506297265e-02,1.001949809266419328e-01,-8.548170178986681800e-02,1.577671303291437177e-01,4.733019139877079479e-02,-7.007793589599560502e-02,-1.120620576904418630e-01,-5.445909049663023860e-02,-1.488250459300173578e-01,9.498571511971867776e-02,-2.425212864339682320e-02,4.462834581886086782e-02,-6.402252973293234839e-02,-5.440071494906921490e-02,-4.326049525328046902e-02,-1.826236947507621500e-01,-1.081810341671994406e-03,3.777174245677639153e-02,1.962008734612737115e-02,-1.221305234273547570e-02,-2.493206604907649906e-02,-9.353910507078938563e-02,-1.875377181847662778e-01,-1.847798549168765125e-02,8.710211136827681819e-03,1.237491177589707392e-01,7.393659271312996717e-02,1.161402395154230993e-01,2.380210433856176297e-02,9.340658551732212989e-02,7.746660051466526531e-02,-1.680991925638943008e-01,-4.186682590736921783e-02,-1.363527314542380998e-02,2.152453619569409671e-02,1.659791063418715185e-01,3.306697361268367413e-02,-4.526382166350994413e-02,1.701868876354412641e-01,2.800016654365450330e-02,2.490041363649161607e-02,-8.159216616472365902e-02,-6.374895264647924276e-02,7.958027780412955943e-03,-1.368351011470247784e-02,-1.159978178233819629e-01,3.568356578914123195e-02,-4.016738880796845435e-02,-2.042358792553427560e-01,-1.262904022539061977e-01,-1.872797047148833105e-01,-2.108714888504696974e-02,-4.068486707350248144e-02,-7.579403364406848628e-03,-4.284718556787605465e-02,-1.096929100199404844e-01,2.658844322818846861e-01,1.659322106503860195e-01,-9.525743991352482454e-02,1.243503065771406069e-01,-1.017198666836641036e-01,7.774286669420819862e-02,9.236211909788778762e-02,1.390796592557557443e-01,-1.866186672317061424e-01,9.345231317485611089e-02,-9.697718685700759678e-02,-9.038928360379515359e-02,1.153801893631783287e-01,9.801521165636614685e-02,3.710412388678293455e-02,1.409678994550776221e-01,-5.723440454042221653e-02,1.279633711809657556e-02,5.943651899752384893e-02,1.226808548269424509e-01,2.010412192312850954e-01,-1.646869796788668142e-02,1.110334708669115551e-02,1.308391361445865042e-01}};
		    
	        
	        //6x1
	        double[][] matrix2 = {{9.451498547471029466e-02,1.077653662749213787e-01,3.375049182639312112e-02,-3.245775528009971905e-02,8.988895604811555917e-02,-1.558731606805232595e-01,6.977398854033026177e-02,-4.272649354949804683e-03,-1.346854228171530665e-01,1.430292034051541261e-01,1.151754244569772913e-02,1.287241093815080506e-01,-7.821920934777894241e-02,-3.528900014799793428e-02,-5.398829502129993269e-02,1.285891904258058271e-01,9.518826499922551643e-02,1.170152263447130914e-01,-3.748732923090032643e-02,9.940457774593511320e-02,-1.457132854070599670e-01,2.229661746320143328e-02,-1.135497228275293563e-01,-3.284766031916484114e-02,2.866843070706502974e-02,3.210203178476791347e-02,-1.376260797493290833e-01,-7.205531667644379801e-02,4.160343418127675219e-02,-1.621470100919322060e-02,7.452724243574849724e-04,5.987951847110201814e-02,1.280293540684642462e-01,-1.882627586953465604e-02,2.450658051990349529e-02,-1.043989284919178556e-01,9.637379955975905813e-03,1.461928310300102118e-01,-6.102013986870472723e-02,-2.983823116516852447e-02,1.626355616907170301e-02,-1.150327570488220846e-01,1.300726337814522501e-02,-1.322927549162486727e-01,-2.102984714322035098e-01,-1.525684293941521052e-01,4.036287858025225384e-02,-1.657191169535055311e-02,1.376985090800655065e-01,-1.212619380249044081e-02,-3.590155208629759037e-02,5.138208910809063945e-02,1.935868742404289189e-01,-4.291703406958155553e-02,1.563788005411479998e-01,-1.669712563277955114e-02,1.648603313949798532e-01,-3.273736974553863310e-02,-2.970386190531573017e-02,-9.758186663006596095e-02,-2.210289360174329254e-01,-7.541922435252389201e-02,-1.619646441013356530e-01,-8.119983092522750634e-02,3.313847075874257371e-03,1.106949489692539840e-01,6.038968641991116632e-02,8.296348613266976701e-02,-1.544868854788644837e-02,-5.550313504604519922e-03,3.136589366136052770e-02,-1.384461456358302145e-01,-2.914959529724307080e-02,-1.079501946017201730e-01,1.825060375368128818e-02,-4.782244452913118893e-02,-6.741477929546674241e-02,-1.320216946218365564e-02,-2.219530776514269318e-02,4.327622077426613451e-03,-1.575748383084484838e-01,-1.729580289643574686e-01,-2.497385462226980532e-02,-1.464893630754728060e-02,5.281684045559471158e-02,-3.169407902615304501e-03,-8.021319966626767883e-02,-2.011767331657840219e-01,2.116833636091451920e-01,-2.494747474355572259e-01,-1.519161437330371900e-01,5.384841248777917991e-03,-1.971989181369810176e-02,-3.239398303148522534e-02,1.762054613609985443e-01,-2.081427400125921978e-01,8.541941172671319027e-02,-3.202139968674405646e-02,5.609951864729403187e-02,4.771675734449065676e-02},
	        		{7.206594302352407194e-03,-1.104385914691383141e-01,5.521896323874751766e-02,1.849617666281595241e-01,7.054485613360880758e-02,9.080170770002794767e-02,-1.338866792558959795e-01,-4.893046650436431999e-02,-1.388784977018652222e-01,5.237321299543051811e-02,-1.931896430351291438e-01,1.108192796263349211e-01,-1.047830787655520818e-01,6.552845255541617231e-02,1.638165514215855073e-02,-1.232294058293209593e-01,1.175514724761149293e-01,7.085035459843405659e-02,-1.838086450406188344e-01,6.623831157603338182e-02,-3.722896713159765808e-02,-1.438171820116317112e-01,9.754671141822986169e-02,-4.788413149153934734e-02,-1.435867558877113592e-01,3.367821165470674671e-02,1.473336741200792152e-02,1.839339112115390695e-01,-8.228468053946356997e-03,-8.324730483954699556e-02,1.004535854767577840e-01,4.123114762185695059e-02,-1.505240041263156310e-02,-9.406880512390701499e-02,2.177551604498681372e-03,-9.771544978794766134e-02,7.881198008658342469e-02,4.390296343330232776e-02,-3.276693188096257980e-02,7.986046328319720833e-02,1.759621217824890727e-01,3.304467346420705137e-02,-7.511918369859438283e-02,2.561039286869984735e-02,1.351108767149560297e-01,-2.577879222307010720e-01,-1.984915953288488299e-01,5.082996949669499331e-02,8.611179546010508390e-02,-7.497127521417323859e-02,-1.264105041868625046e-01,-2.085051046885273152e-01,-6.082533501575358714e-03,-2.913247873038195962e-02,1.489036118176714496e-01,-6.901882418328743329e-02,2.413485627646737297e-02,-1.633698987011865042e-02,-1.673350156866221516e-01,-8.641321922123379809e-03,-6.241654592640467902e-02,1.103798505406491104e-01,-4.171299600290512971e-02,7.412897059845766903e-04,-8.272721617924760906e-02,6.059101347509935481e-02,4.101413868226854581e-02,-3.665053523388984991e-02,4.463605478451568298e-02,1.855908096055412237e-01,4.122408371552864492e-02,1.243994390670837558e-01,1.651139696761907624e-02,-3.215993468046061260e-02,9.788111746095977395e-02,-8.415987547942222619e-03,-5.008665226908481927e-02,-9.471422515038580014e-02,-8.949058540195052591e-02,1.570970651278127683e-01,1.237426392081213003e-03,-1.687928403568265609e-02,4.922186975416251858e-02,-8.360411034343748216e-03,5.088747823478636384e-02,5.657111943293050005e-02,-2.365770847360351703e-02,-2.604450462904982500e-01,5.145191271035584601e-02,-1.281917755767346401e-02,-1.492556140608444770e-01,-4.635797567022559990e-02,-3.945312703059393120e-03,-4.080268111899629929e-02,6.045800210739273733e-02,-1.932809294369833009e-01,1.455299657817725190e-01,6.258444979680544140e-02,-5.887444186040224903e-02,7.113357584320961768e-02},
	        		{3.270308554436501813e-02,-5.918775979851429413e-03,1.581312460165455952e-03,2.142345105977550568e-01,5.697217366847259074e-02,9.122702691031182864e-02,-1.130967378012063956e-01,-2.927644553390551518e-02,-3.780852053475159541e-02,1.028183884827762878e-01,-1.001879301303487541e-01,-1.632684130640529585e-01,-1.747999861320807813e-02,5.263401544438292556e-02,-1.222384947025269009e-01,-8.343573527650468419e-03,7.435097568025982040e-02,2.894281761332576433e-02,-3.004200489304172939e-01,-1.703825257715198549e-01,8.811760016259298500e-02,-6.362539297169399199e-02,-1.773526989104183549e-01,2.026337624824458422e-02,9.732134598153459326e-02,-7.264732287078905226e-02,-1.348324168789322847e-02,-1.071360071587164169e-02,8.395435945688731888e-03,3.024108261801127309e-02,5.684835148946849187e-02,7.830194137043040847e-02,-5.464199506681951396e-02,-3.541339790538079041e-02,3.325230914689326911e-02,-9.450027005652264500e-02,9.104839015120766432e-02,4.966982068369452108e-02,-5.572150409623692624e-02,-1.272147585995445640e-01,-1.055868242981662930e-01,1.900624930055439671e-02,1.305750466008596400e-01,9.340528030669489890e-02,5.608515952020855927e-02,-6.480888980189325466e-02,-4.719028992155625997e-03,-1.799175741011806856e-02,-1.037099543967916898e-02,-1.120661048305616192e-01,8.233742368104958465e-02,-2.275106481231753131e-01,-8.740235503153261087e-02,2.572998559650412076e-02,1.629227618782916331e-01,-2.818353827586971699e-02,4.137844211240922915e-02,5.791438917900416233e-02,1.467074931945566143e-03,-7.168406546697579651e-02,-5.598248772216725400e-02,-3.905674736534116287e-03,-8.238681859394932083e-02,-4.299736044165874157e-04,2.842060508496867255e-02,-1.301317282009556431e-01,3.990916042900434502e-02,-5.882320935117341804e-02,9.849976747499970819e-02,4.265825713602069968e-02,6.394126664741558996e-02,1.229377968613182548e-01,4.450112794150328649e-02,-1.056731427574926080e-01,2.628700616150594221e-02,2.528003529748468203e-01,-2.605820139685267045e-01,-7.934651264967132467e-02,-6.996567720029543691e-02,-6.121540988843752334e-02,1.483033770537943163e-01,1.511420185494363744e-01,6.806214763049939220e-02,-1.255447086700869352e-01,2.284551129842692704e-03,-7.702299896512360133e-02,-4.700929237617380158e-02,-1.108405713823560068e-01,1.545090327869809155e-01,-2.353191433089375437e-02,2.172256952067639635e-01,4.814087549252906578e-02,2.726264472192706321e-03,1.318322961867980370e-01,1.656563872986090702e-01,-4.869529942846754361e-02,-4.185863689018277933e-02,5.334522294696333183e-02,1.049344925884444085e-01,1.160951014645920515e-01},
	        		{-1.319809474739644384e-01,-1.415220932237564733e-01,1.048075604353840284e-01,-3.002901525863246879e-02,-1.331816618236506544e-01,8.295271397841078032e-02,1.509226042404380845e-02,-7.175375253023139055e-02,1.011553061906122070e-01,-9.535911121978674077e-02,-2.230117460043355357e-02,1.046911741870340112e-01,1.394511543925997799e-01,1.138227923714285328e-01,-4.739323291385275777e-02,-6.620918249043374060e-02,4.068522959116457199e-02,3.827640730393078172e-02,1.740195653599963255e-01,8.429828218418194963e-02,4.237767287081723594e-02,-2.797118729138330095e-02,-5.615996579500796837e-02,-9.328763251364931286e-02,-7.244884696669644762e-03,2.019408412094093330e-01,5.032052143947463030e-02,-4.868348552909630700e-02,8.385786837113576309e-02,5.723287014175149068e-02,2.635929875760829877e-02,8.915213077485860393e-02,-2.222422783905223798e-01,2.226149513903590005e-02,-1.188444718973708514e-01,-1.044782151021274724e-01,1.256337560977857926e-01,2.125928121245927171e-01,-1.015278766142024836e-02,4.591329522412278957e-02,8.778875749222231351e-02,4.719714492209465401e-02,7.914148274805760108e-02,1.248697142275291966e-01,5.948791713884343108e-02,-8.655125066259801436e-02,-4.045543990373316051e-02,-7.588002780560107463e-02,-3.861347824816186575e-02,7.072764454681924884e-02,-2.920629437671817125e-02,-1.223867320135647169e-01,2.424136920812716700e-01,2.097055283350444249e-02,1.494252042944557712e-01,9.297048835495769215e-02,4.876937423978378039e-02,-1.512911094054233130e-01,9.403748646941181843e-02,-6.371281137694667640e-02,-4.532357898515026323e-02,-3.313561246161074447e-02,-1.369722212409909406e-03,-4.043466821384882059e-02,-1.783276165413844386e-02,1.915126160812478384e-01,9.250175809917117464e-02,1.697572847794761863e-01,1.828430094085043908e-02,1.486927451105730241e-02,1.144866766352564541e-01,7.518693630531458894e-02,-9.020458465733133258e-02,-7.331238239715542893e-02,-8.699430986304988733e-02,1.050627701362840394e-01,1.061787565064913896e-01,-1.416812132762077306e-02,-2.899251738121580435e-02,1.852019526462667098e-01,1.537597201474002473e-01,-4.316549893335077520e-02,-1.616545603333944814e-01,-8.562512212687091451e-02,-1.024880091755921152e-01,1.493364704426197453e-01,4.472840730949725896e-02,2.696700902968921648e-02,8.071278348077982889e-02,1.307817987617224120e-01,-8.223106309164264494e-02,7.595507042792527808e-02,2.013583592951788404e-01,6.234457921948362985e-02,-5.426174376769273694e-02,7.650787001571414392e-02,1.586814580169061684e-02,-1.190776654965558790e-01,-9.054631472264629277e-02,9.222581719901037922e-02},
	        		{-3.832351117098675708e-02,1.850348048956788893e-01,1.260249044921675776e-01,1.244561912580437468e-01,-3.521548069831474670e-02,-1.247810238521334797e-01,3.236647857626725328e-02,5.669725814976939171e-02,4.191579403046612196e-02,-1.273500743159974163e-02,9.012123623754336732e-02,-2.036666366143483758e-02,-1.243900952875947735e-01,-4.408948780230294989e-02,6.219130201338832903e-02,-2.064325253585596043e-01,-1.459282912970857882e-01,6.187082281425720399e-03,-1.495225550188006847e-01,5.393410659701094317e-02,2.380172368449419706e-01,5.655531676510478639e-02,9.414199040327678181e-02,-8.820246502915190731e-03,-2.578097241772105835e-02,8.469897521977330646e-02,-3.493620793564283095e-02,2.860813103166190419e-02,1.812782653380594355e-02,-3.509469132075818815e-02,1.248163912469574255e-01,1.663178897416406621e-01,-6.232641122412411333e-02,9.621513200646904240e-02,-1.274343419962818413e-01,-1.247129398163135394e-01,1.209167722092798491e-01,7.476196180726353557e-02,-9.200295451742680763e-02,1.300167380692618946e-01,1.754693003946639629e-01,4.630962739121203403e-02,-6.671037628936925257e-02,-1.363262092744993714e-01,-1.610702903510989048e-01,6.756110259602543522e-02,-1.931737716491351287e-01,-1.477685771421367589e-01,-9.312592332660252215e-02,-4.494816997201066949e-02,-1.930986825641367241e-02,-1.114550864988143181e-01,8.530335429568022820e-02,1.250588019642094768e-02,8.180950228146953440e-02,4.566725537762713477e-02,1.776402497719126172e-02,-2.089971729059090372e-02,-2.620486433064328144e-02,-1.861822139432736667e-02,2.676596516827098662e-02,5.028278683977658453e-02,-1.123733349967290795e-01,7.060002618765041926e-02,6.067553182446937254e-02,9.466847477294620949e-02,-3.280807399522380624e-02,-3.717337573664230427e-02,2.557544535529507335e-02,2.044812824157758169e-01,6.953864418616201304e-02,2.462087864868330034e-01,-2.275319387734685284e-02,9.883425686686400646e-02,-1.283262342217605934e-01,-1.018995079183833974e-01,5.737985607300690599e-02,-3.519836874977531112e-03,8.219790974861754251e-02,-4.386173546559402059e-02,-5.176836508665794839e-02,1.132428326742429409e-01,-4.161221428738007266e-02,-2.849758991499857716e-02,5.741952734123356022e-02,-1.885989595114133388e-01,-6.473745911216077786e-02,-2.557589375047384858e-02,2.121366306583400974e-01,-3.898234595053298723e-02,-2.608472323527290596e-03,2.182596991256439689e-01,-7.712668633152977571e-02,3.907481259968878518e-02,2.678661475668473943e-02,9.641795068998386398e-02,4.047794375875857220e-02,2.757582628700762373e-02,1.444162523323050673e-01,-1.124698011868168618e-02},
	        		{-5.006072810434544426e-03,1.941331354565300343e-02,-9.669801132111804920e-02,8.228730020717513194e-02,-1.122363221943806361e-01,-1.144442633373140006e-01,-1.171079950798381286e-01,2.955703203617277702e-02,-1.619260069115016631e-02,-1.450521980942678577e-02,-3.895517208285220745e-02,1.061823152726558833e-01,-1.234648588628228932e-01,-4.526306502999438708e-02,-1.950568695986166778e-01,-2.055572010075079267e-02,7.073352961101007919e-02,8.429458889732537041e-02,7.825662017752538224e-02,2.165213881508269711e-02,2.305540552760595302e-02,1.523510507523279656e-01,5.957977497192135097e-02,2.435508681541309617e-02,4.141536504865326457e-02,-5.020435494407075178e-02,-4.244765167052971799e-02,-1.766344369308712721e-03,-4.411054713433180258e-02,9.152061826739789352e-02,6.077726796310772839e-02,7.794811035645950181e-02,1.989257773860046985e-01,-7.100145136480540131e-02,1.309736374977124584e-01,4.158404697549853563e-02,-8.884019924531656037e-03,1.238602990527599423e-01,4.555891093214664567e-02,-1.776052804139947316e-01,5.975270582539594921e-02,-1.223640508185440262e-01,2.486361612348578221e-02,6.863633216029943473e-02,-1.234550168204247567e-01,-4.935119533519550378e-02,-4.483968688153801285e-02,-1.423090832366198655e-01,-1.112133390185690296e-01,1.044355092621590542e-02,-1.290543195420002509e-01,-9.029584099871207359e-02,8.074020295503128719e-02,-7.864485146269371840e-02,8.566710728328248356e-03,3.803471325094624766e-02,-3.926178991167035559e-02,3.242176608892730072e-02,-6.630873977040041556e-02,6.244023247772177015e-02,-4.880228856482874550e-03,-4.634434723092105066e-03,-4.668495934989092683e-02,-3.059080555220012113e-02,-8.235889208901607528e-02,1.014399331275137595e-01,4.306549992240499281e-02,4.026615238518987255e-02,-9.954010591432435606e-02,1.037975303969034813e-01,1.394969014551549757e-01,-1.223412640505969623e-01,-1.949160565794787886e-02,-8.985502982192933308e-02,-1.935180308235833480e-01,1.683440934460645744e-01,-4.914787752107070001e-02,1.130501458573755502e-01,-1.267616944832781756e-01,9.088093154539315932e-02,-5.405810837992710421e-02,-1.434949158473597941e-01,1.101525436181276935e-01,1.303703819840982270e-01,-1.966310071487243627e-01,1.530445050399128204e-01,-6.823593412206360731e-02,-2.778224617633068827e-01,-1.034136815366009238e-01,-6.439686549221758372e-02,-1.644455582569579188e-01,1.590364675053970722e-01,1.329136891105627549e-01,4.972573154265828160e-02,-3.041083611929298880e-02,-2.062039907563697205e-01,6.751505860620224050e-03,1.675884381870654249e-01,5.728336132531636204e-02,1.066482149111177141e-01}};

	        
	        double[][] idf1 = {{2.53365651, 0.36778106, 3.69219869, 4.89921667, 2.329779, 2.17925309, 0.36778106, 5.69025302}};
	        double[] idf1Aux = idf1[0];
	        
	        double[][] idf2 = {{4.67549962, 7.41304544, 3.05131559, 0.36778106, 3.28756848, 2.13226342}};
	        double[] idf2Aux = idf2[0];
	        
	        
	        //8x6
	        double[][] dotProduct = {{-8.74708030e-03,-9.49173569e-04,-1.79407540e-01,3.74671331e-02,1.10620335e-02,-2.39550092e-02},
	        		{-1.65991873e-03,1.32750671e-01,-3.95720152e-02,1.00000000e+00,9.98105323e-02,1.00279153e-01},
	        		{-1.85798468e-01,-3.47567323e-01,2.52301853e-01,-2.05768860e-01,4.91026654e-02,7.07769332e-02},
	        		{8.42338642e-02,-1.20632989e-01,-1.58154552e-01,8.17010202e-02,1.29454867e-01,3.26263852e-01},
	        		{-1.04848064e-01,-1.23336895e-01,-6.91721753e-02,5.50900858e-02,-8.61384831e-02,1.99030313e-01},
	        		{-9.19693471e-02,-1.49011563e-02,1.10217510e-01,1.63868803e-01,-1.29026108e-01,8.00056818e-02},
	        		{-1.65991873e-03,1.32750671e-01,-3.95720152e-02,1.00000000e+00,9.98105323e-02,1.00279153e-01},
	        		{3.57187560e-02,-1.60963986e-01,-1.76257287e-01,3.84315082e-02,5.88597136e-02,1.18360822e-01}};
	        
	        /*double[] maxVec = new double[matrix2.length];
	        for(int i=0; i< matrix2.length; i++) {
	        	double max = Doubles.max(matrix2[i]);
	        	maxVec[i]=max;
	        }
	        StdArrayIO.print(maxVec);*/
	        
	        //double[] maxVec = max(matrix2);
	        //StdArrayIO.print(maxVec);
	        
	        //1x8
	        double[] dotProductMax = max(dotProduct);
	        StdArrayIO.print(dotProductMax);
	        
	        
	        //idfAndDotProductMax = idf1 * dotProductMax
	       /* double result[] = new double[idf1Aux.length];
	        Arrays.setAll(result, i -> idf1Aux[i] * dotProductMax[i]);
	        StdArrayIO.print(result);
	        
	        double[] idfAndDotProductMax = multiply(idf1Aux, dotProductMax);
	        StdArrayIO.print(idfAndDotProductMax);
	        
	        double numerator = sumElements(idfAndDotProductMax);
	        System.out.println(numerator);
	        
	        double idfSum = sumElements(idf1Aux);
	        System.out.println(idfSum);
	        
	        double sim12 = numerator/idfSum;
	        System.out.println(sim12);
	        */
	        
	        
	        double simPair = simDocPair(matrix1,matrix2,idf1,idf2);
	       
	        
	        
	        
	    }
	
	    
	/*private static double[][] readMatrix(String string) {
		List<String[]> data = new ArrayList<String[]>();
		List<String> wordsAndVectors = Files.readAllLines(Paths.get(CrokageStaticData.SO_CONTENT_WORD_VECTORS));
		for(String line: wordsAndVectors) {
		  String[] values = new String[5];
		  String[] pieces = line.split(",");
		  for (int i = 0; i<pieces.length; i++)
		     values[i] = pieces[i];
		  data.add(values);

		
		}
	}*/

	public static double simDocPair(double[][] matrix1, double[][] matrix2, double[][] idf1, double[][] idf2) {
		double[] idf1Aux = idf1[0];
		double[] idf2Aux = idf2[0];
		
		double[][] dotProduct1 = dotProduct(matrix1,transpose(matrix2));
		double[] dotProductMax1 = max(dotProduct1);
		double[] idfAndDotProductMax1 = multiply(idf1Aux, dotProductMax1);
		double numerator1 = sumElements(idfAndDotProductMax1);
		double idfSum1 = sumElements(idf1Aux);
		double sim12 = numerator1/idfSum1;
		//System.out.println(sim12);
		
		double[][] dotProduct2 = dotProduct(matrix2,transpose(matrix1));
		double[] dotProductMax2 = max(dotProduct2);
		double[] idfAndDotProductMax2 = multiply(idf2Aux, dotProductMax2);
		double numerator2 = sumElements(idfAndDotProductMax2);
		double idfSum2 = sumElements(idf2Aux);
		double sim21 = numerator2/idfSum2;
		//System.out.println(sim21);
		
		double result = 2*sim12*sim21/(sim12+sim21);
		//System.out.println(result);
		return result; 
	
	}

	private static double sumElements(double[] a) {
		return DoubleStream.of(a).sum();
	}

	// element-wise multiplication
	private static double[] multiply(double[] a, double[] b) {
		if (a.length != b.length)
			throw new RuntimeException("Illegal arrays dimensions.");
		double result[] = new double[a.length];
		Arrays.setAll(result, i -> a[i] * b[i]);
		return result;
	}

	public static double[] max(double[][] matrix) {
		double[] maxVec = new double[matrix.length];
		for (int i = 0; i < matrix.length; i++) {
			double max = Doubles.max(matrix[i]);
			maxVec[i] = max;
		}
		return maxVec;
	}
	
}

