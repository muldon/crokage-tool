----------------- No.54 -----------------
query : the simplest way to create jar file

----Summary----
You Should Use Maven Shading Plugin To Do That. I Often Use Maven To Build Standalone Jar File And It Is So Powerful.
Onejar Uses A Custom Classloader Which Can Navigate Nested Resources. Look At The .Bat File In The Download It Looks Like Org.Codelutin.Jrst.Jrst In The Jrst0.8.1.Jar Is The Main Class So Your Manifest Should Look Like This.
I Actually Tried Proguard With The Jrst Tool And It Is As You Reported. I Tried To Track The Problem Down And Found It To Relate To A Bug In The Icu4j Library Referenced By Jrst. The Problem Is That The Used Icu Version Is Far Outdated Right Now. So I Replaced The Icu.Jar File With Icu4j Version 3.2. Now Proguard Finds A Bunch Of Other Errors/Warnings About Incosistencies With The Libraries Of Jrst.
Appenders Define How And Where Things Are Appended. Will It Be Logged To A File To The Console To A Database Etc.? In This Case You Are Specifying That Log Statements Directed To Fileappender Will Be Put In The File Sample.Log Using The Pattern Specified In The Layout Tags. You Could Just As Easily Create A Appender For The Console Or The Database. Where The Console Appender Would Specify Things Like The Layout On The Screen And The Database Appender Would Have Connection Details And Table Names.
Assume Your Command Line Application Is Jar1 And The Referenced 3rd Party Jar Is Jar2. Just Add Jar2 To Classpath. That Is It. You Can Invoke All The Desired Classes From Jar1. Since It Is A Command Line Application And You Do Not Want To Deal With Orphan Process The Ideal Way To Handle With It Is You Should Handle It From Your Command Line Application To Kill Orphan Process Similar To What You Do From Your Finally Block Of Trycatch.
----------------------------------------