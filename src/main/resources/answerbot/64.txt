----------------- No.64 -----------------
query : wmq jms api ssl sun jdk and ssl_rsa_with_aes_128_cbc_sha

----Summary----
First I Propose To See This As Tutorial To Integrate Camel With Websphere Mq. Hope It Can Help. Instead Of This I Think You Have To Read Following Link Which There Are Some Advice When You Want Using Websphere Mq Or Another Jms Implementation Instead Of Activemq.
To Debug The Jsse/Ssl Code I Used The Classes Found In The Sun.Security.Ssl And Sun.Security.Ec Packages And Created A New Library. Unfortunately Just Having A Library With All The Source Was Not Enough For Me. I Could Not Figure Out How To Get My Ide Netbeans To Step Into The Jsse Code. Instead It Was Calling The Jsse Bundled With My Jdk.
All Ssl Connections Are Associated With An Ssl Session Which May Be Reused Across Distinct Tcp Connections To Reduce Handshake Overhead When Negotiating Temporary Encryption Keys After The Actual Tcp Connection Has Been Established. It Could Be That Your Clients Are Somehow Forcing The Creation Of A New Session And Since The Default Configuration For Java 6 Seem To Be To Cache An Unlimited Number Of Sessions For One Hour You May Easily Run Into A Memory Problem.
You Can Manipulate These Settings For Your Server Socket By Getting The Sslsessioncontext From Your Server Socket With Getsession .Getsessioncontext And Set The Cache Size With Setsessioncachesize And Timeout In Seconds With Setsessiontimeout. I Would Have Expected It To Be Possible To Change The Default Configuration Through System Properties But I Am Not Able To Find Any Documentation On That. Perhaps You Can Find Something Yourself By Googling A Little Bit Longer Than I Did.
Without This Limitation It Was Easy To Reproduce Your Memory Leak As Each Cached Ssl Session Seams To Use Somewhere Around 7800 Bytes Of Heap Memory. With The Session Count Limit My Server Has Been Running Under Stress For About 15 Minutes Now And Is Still Using Only 34 Mb Of Heap Memory.
----------------------------------------