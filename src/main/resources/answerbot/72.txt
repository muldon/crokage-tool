----------------- No.72 -----------------
query : does collect operation on stream close the stream and underlying resources

----Summary----
If You Do Not Have A Reference To The Cipher You Could Pass A Filteroutputstream To The Method That Creates The Cipheroutputstream . In The Filteroutputstream Override The Close Method So That It Does Not Actually Close The Stream.
Update 2015/05/31  I Added The Distinct Atleast Method To The Streamex 0.3.1. It Is Implemented Using Custom Spliterator . Benchmarks Showed That This Implementation Is Significantly Faster For Sequential Streams Than Stateful Filtering Described Above And In Many Cases It Is Also Faster Than Other Solutions Proposed In This Topic. Also It Works Nicely If Null Is Encountered In The Stream The Groupingby Collector Does Not Support Null As Class Thus Groupingby Based Solutions Will Fail If Null Is Encountered .
Because Streams That Require Explicit Resource Release Is Actually A Pretty Unusual Case. So We Chose Not To Burden All Stream Execution With Something That Is Only Valuable For .01% Of Usages.
You Are The One Opening The Resource And You Should Close It. In Fact Since Closing A Stream Resulting From Calling An Accessor Method On Some Resourceholding Object Will Sometimes Close The Underlying Object You Probably Do Not Want The Stream Closing The Bufferedreader For You You Might Want It To Stay Open After The Call.
As Far As I Can Tell From The Stream Interface And Some Of The Supporting Libraries There Is Not A Single Operation That Does Both Of These And Produces An Output Stream Based On My Short Reading Of The Scala Collect Method .
----------------------------------------