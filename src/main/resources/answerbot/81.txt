----------------- No.81 -----------------
query : how does volatile actually work

----Summary----
The Volatile Keyword Determines Whether The Variable Will Be Threadcached Locally Or Not.
I Have Read In Almost All The Posts That Volatile Even If It Is Not Static Variable Is Shared Among The The Threads.
That Is An Incorrect Statement. A Volatile Instance Variable Is Not Shared Among Threads. A Volatile Instance Variable Of A Class Ensures That All Threads That Share The Same Instance Of A Class Will Always See The Updated Value Of The Volatile Instance Variable Of The Class Instead Of Reading The Value From The Cache.
Some Comments Point Out That Testvalue Is Not An Atomic Operation. In General It Is True That You Should Avoid This Kind Of Operation On A Volatile Variable That You Re Sharing Between Threads. For Your Limited Example However This Is Not Actually A Concern Since Only One Thread Actually Mutates The Value Of The Variable.
You Need To Be A Bit Careful Here As Youhave Chosen Two Different Types In Your Examples. My General Rule Of Thumb Is That Volatile Is Best Used With Booleans And With Everything Else You Probably Need Some Other Kind Of Sync Ing Mechanism. It Is Very Common In C# And Java To Use A Volatile Boolean To E.G. Stop A Loop Or Task Executing Which Has Visibility From Multiple Threads.
----------------------------------------