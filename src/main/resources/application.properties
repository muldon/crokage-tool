debug=false
server.port= 8080
#server.port= 80

spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
spring.database.driverClassName=org.postgresql.Driver
spring.devtools.livereload.enabled = false

endpoints.cors.allowed-origins=*
spring.jpa.show-sql=false
#logging.level.org.springframework.web=DEBUG
#logging.level.org.hibernate.SQL=DEBUG
#logging.file = coderec.log
#logging.config = classpath:logback.xml


############################## INPUT PARAMETERS ######################################

spring.datasource.url=jdbc:postgresql://localhost:5432/stackoverflow2018java
spring.datasource.username=postgres
spring.datasource.password=lascampostgres5k

# This file must exists anywhere the app runs
pathFileEnvFlag = /home/digao/tmp/environmentFlag.properties
#tagFilter = java    --run script to fill postsmin table containing only java posts 


#1 to 8. 
#Phase 1: Run approach for 1/3 of the external questions in two perspectives: with and without RACK (10\% for each). For each perspective, run steps 2 to 9 for each question using features default weights (all set to 0.5) and adjuster default weights (all set to 1.0) and store posts according to the ranking order. Also, after step 6, store all related posts for each question.
#Phase 2: Run internal survey for the selected questions in Phase 1 to evaluate answers. For each perspective and for each question, retrieve the ranked posts previously stored. Store the evaluation of each user.
#Phase 3: Discover the best adjuster weights. Use the previous analyzed posts to discover what is the influence of the post origin the post quality. Set adjuster weights.
#Phase 4: Run approach for the 2/3 remaining questions like in Phase 1. 
#Phase 5: Discover the best weights for the composer. For each question, retrieve the previously stored related posts, bootstrap weights, run steps 7 to 9 using each set of weights, build a ranked list and generate recall-rates and mrr. In the end, store the k best results and their weights. The best perspective may be discovered as well. Compare perspectives results. 
#Phase 6: For each question in the best evaluated perspective (with or without RACK), retrieve the related posts previously stored, run steps 7 to 9 using the best weights for the composer and store the ranked list. 
#Phase 7: Run external survey to evaluate answers. Load each question and its ranked list and store users evaluations. 
#Phase 8: Use users ratings to generate recall-rates and mrr.
phaseNumber=2

#external question field 
obs = questions without rack
#blank to all
numberOfQueriesToTest =
shuffleListOfQueriesBeforeGoogleSearch = false

#if false, disable RACK tool
runRack = false
numberOfRackClasses = 2

#if false, use a static list
runGoogleSearch = true   
numberOfGoogleResults = 10
APIKEY				= AIzaSyDtJV3KNblIpJfWGyKqSLMXntcZZlEZGFw
CUSTOM_SEARCH_ID    = 001510221793838672117:ix_l9bnjhbq



#when performing stemming and removing stop words, prune words with minimum size equals or less than:
minTokenSize=0

#other important control variables

internalSurveyRankListSize=15
externalSurveyRankListSize=10

#ranking weights
alphaCosSim  	  = 0.50
betaCoverageScore = 0.50
gamaCodeSizeScore = 0.50
deltaRepScore     = 0.50
epsilonUpScore    = 0.50

#relation type weights
relationType_FROM_GOOGLE_QUESTION = 1.0
relationType_RELATED_DUPE 		  = 1.0
relationType_FROM_GOOGLE_ANSWER   = 1.0
relationType_RELATED_NOT_DUPE     = 1.0
relationType_LINKS_INSIDE_TEXTS   = 1.0


