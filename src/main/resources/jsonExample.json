{
 "kind": "customsearch#search",
 "url": {
  "type": "application/json",
  "template": "https://www.googleapis.com/customsearch/v1?q={searchTerms}&num={count?}&start={startIndex?}&lr={language?}&safe={safe?}&cx={cx?}&sort={sort?}&filter={filter?}&gl={gl?}&cr={cr?}&googlehost={googleHost?}&c2coff={disableCnTwTranslation?}&hq={hq?}&hl={hl?}&siteSearch={siteSearch?}&siteSearchFilter={siteSearchFilter?}&exactTerms={exactTerms?}&excludeTerms={excludeTerms?}&linkSite={linkSite?}&orTerms={orTerms?}&relatedSite={relatedSite?}&dateRestrict={dateRestrict?}&lowRange={lowRange?}&highRange={highRange?}&searchType={searchType}&fileType={fileType?}&rights={rights?}&imgSize={imgSize?}&imgType={imgType?}&imgColorType={imgColorType?}&imgDominantColor={imgDominantColor?}&alt=json"
 },
 "queries": {
  "request": [
   {
    "title": "Google Custom Search - java calculating time diffrence Date Calendar",
    "totalResults": "162000",
    "searchTerms": "java calculating time diffrence Date Calendar",
    "count": 10,
    "startIndex": 1,
    "inputEncoding": "utf8",
    "outputEncoding": "utf8",
    "safe": "off",
    "cx": "001510221793838672117:ix_l9bnjhbq"
   }
  ],
  "nextPage": [
   {
    "title": "Google Custom Search - java calculating time diffrence Date Calendar",
    "totalResults": "162000",
    "searchTerms": "java calculating time diffrence Date Calendar",
    "count": 10,
    "startIndex": 11,
    "inputEncoding": "utf8",
    "outputEncoding": "utf8",
    "safe": "off",
    "cx": "001510221793838672117:ix_l9bnjhbq"
   }
  ]
 },
 "context": {
  "title": "SOSearch"
 },
 "searchInformation": {
  "searchTime": 0.248334,
  "formattedSearchTime": "0.25",
  "totalResults": "162000",
  "formattedTotalResults": "162,000"
 },
 "spelling": {
  "correctedQuery": "java calculating time difference Date Calendar",
  "htmlCorrectedQuery": "java calculating time \u003cb\u003e\u003ci\u003edifference\u003c/i\u003e\u003c/b\u003e Date Calendar"
 },
 "items": [
  {
   "kind": "customsearch#result",
   "title": "Calculate date/time difference in java - Stack Overflow",
   "htmlTitle": "\u003cb\u003eCalculate date\u003c/b\u003e/\u003cb\u003etime difference\u003c/b\u003e in \u003cb\u003ejava\u003c/b\u003e - Stack Overflow",
   "link": "https://stackoverflow.com/questions/5351483/calculate-date-time-difference-in-java",
   "displayLink": "stackoverflow.com",
   "snippet": "Joda-Time is the de facto standard date and time library for Java prior to Java SE \n8. .... DAY)); } /** * Calculate the absolute difference between two Date without * \nregard for time offsets .... HOUR_OF_DAY); int minutes = calendar.get(Calendar.",
   "htmlSnippet": "Joda-\u003cb\u003eTime\u003c/b\u003e is the de facto standard \u003cb\u003edate\u003c/b\u003e and \u003cb\u003etime\u003c/b\u003e library for \u003cb\u003eJava\u003c/b\u003e prior to \u003cb\u003eJava\u003c/b\u003e SE \u003cbr\u003e\n8. .... DAY)); } /** * \u003cb\u003eCalculate\u003c/b\u003e the absolute \u003cb\u003edifference\u003c/b\u003e between two \u003cb\u003eDate\u003c/b\u003e without * \u003cbr\u003e\nregard for \u003cb\u003etime\u003c/b\u003e offsets .... HOUR_OF_DAY); int minutes = \u003cb\u003ecalendar\u003c/b\u003e.get(\u003cb\u003eCalendar\u003c/b\u003e.",
   "cacheId": "lk3W6s2RnCgJ",
   "formattedUrl": "https://stackoverflow.com/.../calculate-date-time-difference-in-java",
   "htmlFormattedUrl": "https://stackoverflow.com/.../\u003cb\u003ecalculate\u003c/b\u003e-\u003cb\u003edate\u003c/b\u003e-\u003cb\u003etime\u003c/b\u003e-\u003cb\u003edifference\u003c/b\u003e-in-\u003cb\u003ejava\u003c/b\u003e",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "Calculate date/time difference in java",
      "name": "Calculate date/time difference in java",
      "description": "I want to calculate difference between 2 dates in hours/minutes/seconds. I have a slight problem with my code here it is : String dateStart = \"11/03/14 09:29:58\"; String dateStop = \"11/03/14 09:..."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "Calculate date/time difference in java [duplicate]",
      "upvotecount": "126",
      "text": "This question already has an answer here: How to convert Milliseconds to “X mins, x seconds” in Java? 24 answers I want to calculate difference between 2 dates in hours/minutes/seconds....",
      "answercount": "17"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/5351483/calculate-date-time-difference-in-java",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "Calculate date/time difference in java",
      "twitter:description": "I want to calculate difference between 2 dates in hours/minutes/seconds.   I have a slight problem with my code here it is :  String dateStart = \"11/03/14 09:29:58\"; String dateStop = \"11/03/14 09:...",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/5351483/calculate-date-time-difference-in-java",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/5351483/calculate-date-time-difference-in-java",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/5351483/calculate-date-time-difference-in-java",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "86",
      "text": "try long diffSeconds = diff / 1000 % 60; long diffMinutes = diff / (60 * 1000) % 60;"
     },
     {
      "upvotecount": "197",
      "text": "I would prefer to use suggested java.util.concurrent.TimeUnit class. long diff = d2.getTime() - d1.getTime();//as given long seconds = TimeUnit.MILLISECONDS.toSeconds(diff); long minutes =..."
     },
     {
      "upvotecount": "37",
      "text": "If you are able to use external libraries I would recommend you to use Joda-Time, noting that: Joda-Time is the de facto standard date and time library for Java prior to Java SE 8. Users are..."
     },
     {
      "upvotecount": "18",
      "text": "Since Java 5, you can use java.util.concurrent.TimeUnit to avoid the use of Magic Numbers like 1000 and 60 in your code. By the way, you should take care to leap seconds in your computation:..."
     },
     {
      "upvotecount": "11",
      "text": "Try this for a friendly representation of time differences (in milliseconds): String friendlyTimeDiff(long timeDifferenceMilliseconds) { long diffSeconds = timeDifferenceMilliseconds / 1000;..."
     },
     {
      "upvotecount": "6",
      "text": "This is more of a maths problem than a java problem basically. The result you receive is correct. This because 225 seconds is 3 minutes (when doing an integral division). What you want is the..."
     },
     {
      "upvotecount": "3",
      "text": "difference-between-two-dates-in-java Extracted the code from the link public class TimeDiff { /** * (For testing purposes) * */ public static void main(String[] args) { Date d1 = new Date();..."
     },
     {
      "upvotecount": "2",
      "text": "Create a Date object using the diffence between your times as a constructor, then use Calendar methods to get values .. Date diff = new Date(d2.getTime() - d1.getTime()); Calendar calendar..."
     },
     {
      "upvotecount": "2",
      "text": "// d1, d2 are dates long diff = d2.getTime() - d1.getTime(); long diffSeconds = diff / 1000 % 60; long diffMinutes = diff / (60 * 1000) % 60; long diffHours = diff / (60 * 60 * 1000) % 24;..."
     },
     {
      "upvotecount": "2",
      "text": "Joda-Time Joda-Time 2.3 library offers already-debugged code for this chore. Joad-Time includes three classes to represent a span of time: Period, Interval, and Duration. Period tracks a span..."
     },
     {
      "upvotecount": "2",
      "text": "I know this is an old question, but I ended up doing something slightly different from the accepted answer. People talk about the TimeUnit class, but there were no answers using this in the..."
     },
     {
      "upvotecount": "2",
      "text": "Here is a suggestion, using TimeUnit, to obtain each time part and format them. private static String formatDuration(long duration) { long hours = TimeUnit.MILLISECONDS.toHours(duration); long..."
     },
     {
      "upvotecount": "1",
      "text": "Here is my code. import java.util.Date; // to calculate difference between two days public class DateDifference { // to calculate difference between two dates in milliseconds public long getDateDif..."
     },
     {
      "upvotecount": "0",
      "text": "long diffSeconds = (diff / 1000)%60; try this and let me know if it works correctly..."
     },
     {
      "upvotecount": "0",
      "text": "Well, I'll try yet another code sample: /** * Calculates the number of FULL days between to dates * @param startDate must be before endDate * @param endDate must be after startDate * @return..."
     },
     {
      "upvotecount": "0",
      "text": "Date startTime = new Date(); //... //... lengthy jobs //... Date endTime = new Date(); long diff = endTime.getTime() - startTime.getTime(); String hrDateText = DurationFormatUtils.formatDuration(di..."
     },
     {
      "upvotecount": "0",
      "text": "As said before - think this is a good answer /** * @param d2 the later date * @param d1 the earlier date * @param timeUnit - Example Calendar.HOUR_OF_DAY * @return */ public static int getTimeDiffe..."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "Calculating the difference between two Java date instances - Stack ...",
   "htmlTitle": "\u003cb\u003eCalculating\u003c/b\u003e the \u003cb\u003edifference\u003c/b\u003e between two \u003cb\u003eJava date\u003c/b\u003e instances - Stack ...",
   "link": "https://stackoverflow.com/questions/1555262/calculating-the-difference-between-two-java-date-instances",
   "displayLink": "stackoverflow.com",
   "snippet": "This means if you compute the diff between dates with no time you may have a \n..... Better way to implement this is to use java.util.Calendar /** Using Calendar ...",
   "htmlSnippet": "This means if you \u003cb\u003ecompute\u003c/b\u003e the \u003cb\u003ediff\u003c/b\u003e between \u003cb\u003edates\u003c/b\u003e with no \u003cb\u003etime\u003c/b\u003e you may have a \u003cbr\u003e\n..... Better way to implement this is to use \u003cb\u003ejava\u003c/b\u003e.util.\u003cb\u003eCalendar\u003c/b\u003e /** Using \u003cb\u003eCalendar\u003c/b\u003e&nbsp;...",
   "cacheId": "tlE7A09JZPIJ",
   "formattedUrl": "https://stackoverflow.com/.../calculating-the-difference-between-two-java- date-instances",
   "htmlFormattedUrl": "https://stackoverflow.com/.../\u003cb\u003ecalculating\u003c/b\u003e-the-\u003cb\u003edifference\u003c/b\u003e-between-two-\u003cb\u003ejava\u003c/b\u003e- \u003cb\u003edate\u003c/b\u003e-instances",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "Calculating the difference between two Java date instances",
      "name": "Calculating the difference between two Java date instances",
      "description": "I'm using Java's java.util.Date class in Scala and want to compare a Date object and the current time. I know I can calculate the delta by using getTime(): (new java.util.Date()).getTime() - oldDate."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "Calculating the difference between two Java date instances",
      "upvotecount": "342",
      "text": "I'm using Java's java.util.Date class in Scala and want to compare a Date object and the current time. I know I can calculate the delta by using getTime(): (new java.util.Date()).getTime()...",
      "answercount": "43"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/1555262/calculating-the-difference-between-two-java-date-instances",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "Calculating the difference between two Java date instances",
      "twitter:description": "I'm using Java's java.util.Date class in Scala and want to compare a Date object and the current time. I know I can calculate the delta by using getTime():  (new java.util.Date()).getTime() - oldDate.",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/1555262/calculating-the-difference-between-two-java-date-instances",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/1555262/calculating-the-difference-between-two-java-date-instances",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/1555262/calculating-the-difference-between-two-java-date-instances",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "168",
      "text": "The JDK Date API is horribly broken unfortunately. I recommend using Joda Time library. Joda Time has a concept of time Interval: Interval interval = new Interval(oldTime, new Instant()); EDIT:..."
     },
     {
      "upvotecount": "456",
      "text": "Simple diff (without lib) /** * Get a diff between two dates * @param date1 the oldest date * @param date2 the newest date * @param timeUnit the unit in which you want the diff * @return the..."
     },
     {
      "upvotecount": "142",
      "text": "int diffInDays = (int)( (newerDate.getTime() - olderDate.getTime()) / (1000 * 60 * 60 * 24) ) Note that this works with UTC dates, so the difference may be a day off if you look at local dates...."
     },
     {
      "upvotecount": "52",
      "text": "You need to define your problem more clearly. You could just take the number of milliseconds between the two Date objects and divide by the number of milliseconds in 24 hours, for example......"
     },
     {
      "upvotecount": "37",
      "text": "Using the java.time framework built into Java 8+: ZonedDateTime now = ZonedDateTime.now(); ZonedDateTime oldDate = now.minusDays(1).minusMinutes(10); Duration duration = Duration.between(oldDate,..."
     },
     {
      "upvotecount": "34",
      "text": "Days d = Days.daysBetween(startDate, endDate); int days = d.getDays(); http://joda-time.sourceforge.net/faq.html#datediff"
     },
     {
      "upvotecount": "30",
      "text": "tl;dr Convert your obsolete java.util.Date objects to their replacement, java.time.Instant. Then calculate the elapsed time as a Duration. Duration d = Duration.between( // Calculate the span..."
     },
     {
      "upvotecount": "22",
      "text": "A slightly simpler alternative: System.currentTimeMillis() - oldDate.getTime() As for \"nicer\": well, what exactly do you need? The problem with representing time durations as a number of hours..."
     },
     {
      "upvotecount": "19",
      "text": "Using millisecond approach can cause problems in some locales. Lets take, for example, the difference between the two dates 03/24/2007 and 03/25/2007 should be 1 day; However, using the millisecond..."
     },
     {
      "upvotecount": "19",
      "text": "There are many ways you can find the difference between dates & times. One of the simplest ways that I know of would be: Calendar calendar1 = Calendar.getInstance(); Calendar calendar2 = Calendar.g..."
     },
     {
      "upvotecount": "11",
      "text": "Since all the answers here are correct but use legacy java or 3rd party libs like joda or similar, I will just drop another way using new java.time classes in Java 8 and later. See Oracle Tutorial...."
     },
     {
      "upvotecount": "9",
      "text": "Subtracting the dates in milliseconds works (as described in another post), but you have to use HOUR_OF_DAY and not HOUR when clearing the time parts of your dates: public static final long..."
     },
     {
      "upvotecount": "8",
      "text": "Take a look at Joda Time, which is an improved Date/Time API for Java and should work fine with Scala."
     },
     {
      "upvotecount": "8",
      "text": "If you don't want to use JodaTime or similar, the best solution is probably this: final static long MILLIS_PER_DAY = 24 * 3600 * 1000; long msDiff= date1.getTime() - date2.getTime(); long daysDiff..."
     },
     {
      "upvotecount": "5",
      "text": "Let me show difference between Joda Interval and Days: DateTime start = new DateTime(2012, 2, 6, 10, 44, 51, 0); DateTime end = new DateTime(2012, 2, 6, 11, 39, 47, 1); Interval interval =..."
     },
     {
      "upvotecount": "5",
      "text": "If you need a formatted return String like \"2 Days 03h 42m 07s\", try this: public String fill2(int value) { String ret = String.valueOf(value); if (ret.length() \u003c 2) ret = \"0\" + ret; return..."
     },
     {
      "upvotecount": "4",
      "text": "Check example here http://www.roseindia.net/java/beginners/DateDifferent.shtml This example give you difference in days, hours, minutes, secs and milli sec's :). import java.util.Calendar;..."
     },
     {
      "upvotecount": "4",
      "text": "Use GMT time zone to get an instance of the Calendar, set the time using the set method of Calendar class. The GMT timezone has 0 offset (not really important) and daylight saving time flag..."
     },
     {
      "upvotecount": "4",
      "text": "Following code can give you the desired output: String startDate = \"Jan 01 2015\"; DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"MMM dd yyyy\"); LocalDate date = LocalDate.parse(startDat..."
     },
     {
      "upvotecount": "4",
      "text": "public static String getDifferenceBtwTime(Date dateTime) { long timeDifferenceMilliseconds = new Date().getTime() - dateTime.getTime(); long diffSeconds = timeDifferenceMilliseconds / 1000;..."
     },
     {
      "upvotecount": "3",
      "text": "int daysDiff = (date1.getTime() - date2.getTime()) / MILLIS_PER_DAY;"
     },
     {
      "upvotecount": "3",
      "text": "Best thing to do is (Date1-Date2)/86 400 000 That number is the number of milliseconds in a day. One date-other date gives you difference in milliseconds. Collect the answer in a double variable."
     },
     {
      "upvotecount": "2",
      "text": "That's probably the most straightforward way to do it - perhaps it's because I've been coding in Java (with its admittedly clunky date and time libraries) for a while now, but that code looks..."
     },
     {
      "upvotecount": "2",
      "text": "Not using the standard API, no. You can roll your own doing something like this: class Duration { private final TimeUnit unit; private final long length; // ... } Or you can use Joda: DateTime..."
     },
     {
      "upvotecount": "2",
      "text": "Note: startDate and endDates are -\u003e java.util.Date import org.joda.time.Duration; import org.joda.time.Interval; Interval interval = new Interval(startDate.getTime(), endDate.getTime); Duration..."
     },
     {
      "upvotecount": "2",
      "text": "Just to answer the initial question: Put the following code in a Function like Long getAge(){} Date dahora = new Date(); long MillisToYearsByDiv = 1000l *60l * 60l * 24l * 365l; long javaOffsetInMi..."
     },
     {
      "upvotecount": "1",
      "text": "try this: int epoch = (int) (new java.text.SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\").parse(\"01/01/1970 00:00:00\").getTime() / 1000); you can edit the string in the parse() methods param."
     },
     {
      "upvotecount": "1",
      "text": "Since you are using Scala, there is a very good Scala library Lamma. With Lamma you can minus date directly with - operator scala\u003e Date(2015, 5, 5) - 2 // minus days by int res1: io.lamma.Date..."
     },
     {
      "upvotecount": "1",
      "text": "Just use below method with two Date objects. If you want to pass current date, just pass new Date() as a second parameter as it is initialised with current time. public String getDateDiffString(Dat..."
     },
     {
      "upvotecount": "1",
      "text": "Earlier versions of Java you can try. public static String daysBetween(Date createdDate, Date expiryDate) { Calendar createdDateCal = Calendar.getInstance(); createdDateCal.clear(); createdDateCal...."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "How to calculate time difference in java? - Stack Overflow",
   "htmlTitle": "How to \u003cb\u003ecalculate time difference\u003c/b\u003e in \u003cb\u003ejava\u003c/b\u003e? - Stack Overflow",
   "link": "https://stackoverflow.com/questions/4927856/how-to-calculate-time-difference-in-java",
   "displayLink": "stackoverflow.com",
   "snippet": "import java.util.Date; ... Date d1 = new Date(); ... ... Date d2 = new Date(); ... \ngetTime())/1000); //gives the time difference in seconds. .... Calendar c = \nCalendar.",
   "htmlSnippet": "import \u003cb\u003ejava\u003c/b\u003e.util.\u003cb\u003eDate\u003c/b\u003e; ... \u003cb\u003eDate\u003c/b\u003e d1 = new \u003cb\u003eDate\u003c/b\u003e(); ... ... \u003cb\u003eDate\u003c/b\u003e d2 = new \u003cb\u003eDate\u003c/b\u003e(); ... \u003cbr\u003e\ngetTime())/1000); //gives the \u003cb\u003etime difference\u003c/b\u003e in seconds. .... \u003cb\u003eCalendar\u003c/b\u003e c = \u003cbr\u003e\n\u003cb\u003eCalendar\u003c/b\u003e.",
   "cacheId": "jGj7eEXhOewJ",
   "formattedUrl": "https://stackoverflow.com/.../how-to-calculate-time-difference-in-java",
   "htmlFormattedUrl": "https://stackoverflow.com/.../how-to-\u003cb\u003ecalculate\u003c/b\u003e-\u003cb\u003etime\u003c/b\u003e-\u003cb\u003edifference\u003c/b\u003e-in-\u003cb\u003ejava\u003c/b\u003e",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "How to calculate time difference in java?",
      "name": "How to calculate time difference in java?",
      "description": "I want to subtract two timeperiods say 16:00:00 from 19:00:00. Is there any java function for this? The results can be in milliseconds, seconds, or minutes."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "How to calculate time difference in java?",
      "upvotecount": "67",
      "text": "I want to subtract two timeperiods say 16:00:00 from 19:00:00. Is there any java function for this? The results can be in milliseconds, seconds, or minutes.",
      "answercount": "13"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/4927856/how-to-calculate-time-difference-in-java",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "How to calculate time difference in java?",
      "twitter:description": "I want to subtract two timeperiods say 16:00:00 from 19:00:00. Is there any java function for this? The results can be in milliseconds, seconds, or minutes.",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/4927856/how-to-calculate-time-difference-in-java",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/4927856/how-to-calculate-time-difference-in-java",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/4927856/how-to-calculate-time-difference-in-java",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "94",
      "text": "String time1 = \"16:00:00\"; String time2 = \"19:00:00\"; SimpleDateFormat format = new SimpleDateFormat(\"HH:mm:ss\"); Date date1 = format.parse(time1); Date date2 = format.parse(time2); long difference..."
     },
     {
      "upvotecount": "46",
      "text": "Java 8 has a cleaner solution - Instant and Duration Example: import java.time.Duration; import java.time.Instant; ... Instant start = Instant.now(); //your code Instant end = Instant.now();..."
     },
     {
      "upvotecount": "29",
      "text": "TO get pretty timing differences, then // d1, d2 are dates long diff = d2.getTime() - d1.getTime(); long diffSeconds = diff / 1000 % 60; long diffMinutes = diff / (60 * 1000) % 60; long diffHours..."
     },
     {
      "upvotecount": "27",
      "text": "Java 8 DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"); LocalDateTime dateTime1= LocalDateTime.parse(\"2014-11-25 19:00:00\", formatter); LocalDateTime dateTime2=..."
     },
     {
      "upvotecount": "11",
      "text": "Just like any other language; convert your time periods to a unix timestamp (ie, seconds since the Unix epoch) and then simply subtract. Then, the resulting seconds should be used as a new..."
     },
     {
      "upvotecount": "6",
      "text": "import java.util.Date; ... Date d1 = new Date(); ... ... Date d2 = new Date(); System.out.println(d2.getTime()-d1.getTime()); //gives the time difference in milliseconds. System.out.println((d2.get..."
     },
     {
      "upvotecount": "2",
      "text": "The painful way is to convert to millis and do the subtraction and then back to whatever seconds or so you want. The better way is to use JodaTime."
     },
     {
      "upvotecount": "1",
      "text": "Аlternative option if time from different days is taken, for example: 22:00 and 01:55. public static long getDiffTime(Date date1, Date date2){ if (date2.getTime() - date1.getTime() \u003c 0) {//..."
     },
     {
      "upvotecount": "1",
      "text": "String start = \"12:00:00\"; String end = \"02:05:00\"; SimpleDateFormat format = new SimpleDateFormat(\"HH:mm:ss\"); Date date1 = format.parse(start); Date date2 = format.parse(end); long difference..."
     },
     {
      "upvotecount": "1",
      "text": "import java.text.SimpleDateFormat; import java.util.Date; public class Main { public static void main(String[] args) throws Exception{ String time1 = \"12:00:00\"; String time2 = \"12:01:00\";..."
     },
     {
      "upvotecount": "0",
      "text": "/* * Total time calculation. */ private void getTotalHours() { try { // TODO Auto-generated method stub if (tfTimeIn.getValue() != null && tfTimeOut.getValue() != null) { Long min1 = tfTimeOut.getM..."
     },
     {
      "upvotecount": "0",
      "text": "class TimeCalculator { String updateTime; public TimeCalculator(String time) { // time should be in 24 hours format like 15/06/2016 17:39:20 this.updateTime = time; } public String getTimeDifferenc..."
     },
     {
      "upvotecount": "0",
      "text": "public class timeDifference { public static void main(String[] args) { try { Date startTime = Calendar.getInstance().getTime(); Thread.sleep(10000); Date endTime = Calendar.getInstance().getTime();..."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "date - Java 8: Calculate difference (using appropriate time units ...",
   "htmlTitle": "\u003cb\u003edate\u003c/b\u003e - \u003cb\u003eJava\u003c/b\u003e 8: \u003cb\u003eCalculate difference\u003c/b\u003e (using appropriate \u003cb\u003etime\u003c/b\u003e units ...",
   "link": "https://stackoverflow.com/questions/25747499/java-8-calculate-difference-using-appropriate-time-units-between-two-localdat",
   "displayLink": "stackoverflow.com",
   "snippet": "Forunately the date and time classes have a lot of utility methods that simplify that \nto ... changes in a calendar (like the timezone changes in Samoa) affect this \ncalculation. .... toLocalTime(); /*Calculate the time difference*/ Duration duration ...",
   "htmlSnippet": "Forunately the \u003cb\u003edate\u003c/b\u003e and \u003cb\u003etime\u003c/b\u003e classes have a lot of utility methods that simplify that \u003cbr\u003e\nto ... changes in a \u003cb\u003ecalendar\u003c/b\u003e (like the timezone changes in Samoa) affect this \u003cbr\u003e\n\u003cb\u003ecalculation\u003c/b\u003e. .... toLocalTime(); /*\u003cb\u003eCalculate\u003c/b\u003e the \u003cb\u003etime difference\u003c/b\u003e*/ Duration duration&nbsp;...",
   "cacheId": "A877U3X8tjQJ",
   "formattedUrl": "https://stackoverflow.com/.../java-8-calculate-difference-using-appropriate- time-units-between-two-localdat",
   "htmlFormattedUrl": "https://stackoverflow.com/.../\u003cb\u003ejava\u003c/b\u003e-8-\u003cb\u003ecalculate\u003c/b\u003e-\u003cb\u003edifference\u003c/b\u003e-using-appropriate- \u003cb\u003etime\u003c/b\u003e-units-between-two-localdat",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "Java 8: Calculate difference (using appropriate time units) between two LocalDateTime",
      "name": "Java 8: Calculate difference (using appropriate time units) between two LocalDateTime",
      "description": "I am trying to calculate the difference between two LocalDateTime. The output needs to be of the format y years m months d days h hours m minutes s seconds. Here is what I have written: import j..."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "Java 8: Calculate difference (using appropriate time units) between two LocalDateTime",
      "upvotecount": "136",
      "text": "I am trying to calculate the difference between two LocalDateTime. The output needs to be of the format y years m months d days h hours m minutes s seconds. Here is what I have written: import...",
      "answercount": "6"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/25747499/java-8-calculate-difference-using-appropriate-time-units-between-two-localdat",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "Java 8: Calculate difference (using appropriate time units) between two LocalDateTime",
      "twitter:description": "I am trying to calculate the difference between two LocalDateTime.   The output needs to be of the format y years m months d days h hours m minutes s seconds. Here is what I have written:  import j...",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/25747499/java-8-calculate-difference-using-appropriate-time-units-between-two-localdat",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/25747499/java-8-calculate-difference-using-appropriate-time-units-between-two-localdat",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/25747499/java-8-calculate-difference-using-appropriate-time-units-between-two-localdat",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "80",
      "text": "Unfortunately there doesn't seem to be a period class that spans time as well, so you might have to do the calculations on your own. Forunately the date and time classes have a lot of utility..."
     },
     {
      "upvotecount": "272",
      "text": "I found the best way to do this is with ChronoUnit. long minutes = ChronoUnit.MINUTES.between(fromDate, toDate); long hours = ChronoUnit.HOURS.between(fromDate, toDate); Additional documentation..."
     },
     {
      "upvotecount": "11",
      "text": "Here a single example using Duration and TimeUnit to get 'hh:mm:ss' format. Duration dur = Duration.between(LocalDateTimeIni, LocalDateTimeEnd); long millis = dur.toMillis(); String.format(\"%02d:%0..."
     },
     {
      "upvotecount": "4",
      "text": "And the version of @Thomas in Groovy with takes the desired units in a list instead of hardcoding the values. This implementation (which can easily ported to Java - I made the function declaration..."
     },
     {
      "upvotecount": "2",
      "text": "There is some problem for Tapas Bose code and Thomas code. If time differenсe is negative, array gets the negative values. For example if LocalDateTime toDateTime = LocalDateTime.of(2014,..."
     },
     {
      "upvotecount": "0",
      "text": "Here is a very simple answer to your question. It works. import java.time.*; import java.util.*; import java.time.format.DateTimeFormatter; public class MyClass { public static void main(String..."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "Android/Java - Date Difference in days - Stack Overflow",
   "htmlTitle": "Android/\u003cb\u003eJava\u003c/b\u003e - \u003cb\u003eDate Difference\u003c/b\u003e in days - Stack Overflow",
   "link": "https://stackoverflow.com/questions/3838527/android-java-date-difference-in-days",
   "displayLink": "stackoverflow.com",
   "snippet": "public static Calendar getDatePart(Date date){ Calendar cal = Calendar. ..... The \ntime part of the * days is ignored in this calculation, so 2007-01-01 13:00 and ...",
   "htmlSnippet": "public static \u003cb\u003eCalendar\u003c/b\u003e getDatePart(\u003cb\u003eDate date\u003c/b\u003e){ \u003cb\u003eCalendar\u003c/b\u003e cal = \u003cb\u003eCalendar\u003c/b\u003e. ..... The \u003cbr\u003e\n\u003cb\u003etime\u003c/b\u003e part of the * days is ignored in this \u003cb\u003ecalculation\u003c/b\u003e, so 2007-01-01 13:00 and&nbsp;...",
   "cacheId": "jB-7VeU5H44J",
   "formattedUrl": "https://stackoverflow.com/.../android-java-date-difference-in-days",
   "htmlFormattedUrl": "https://stackoverflow.com/.../android-\u003cb\u003ejava\u003c/b\u003e-\u003cb\u003edate\u003c/b\u003e-\u003cb\u003edifference\u003c/b\u003e-in-days",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "Android/Java - Date Difference in days",
      "name": "Android/Java - Date Difference in days",
      "description": "I am getting the current date (in format 12/31/1999 i.e. mm/dd/yyyy) as using the below code: Textview txtViewData; txtViewDate.setText(\"Today is \" + android.text.format.DateFormat.getDate..."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "Android/Java - Date Difference in days",
      "upvotecount": "69",
      "text": "I am getting the current date (in format 12/31/1999 i.e. mm/dd/yyyy) as using the below code: Textview txtViewData; txtViewDate.setText(\"Today is \" + android.text.format.DateFormat.getDateFormat(th...",
      "answercount": "17"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/3838527/android-java-date-difference-in-days",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "Android/Java - Date Difference in days",
      "twitter:description": "I am getting the current date (in format 12/31/1999 i.e. mm/dd/yyyy) as using the below code:  Textview txtViewData; txtViewDate.setText(\"Today is \" +         android.text.format.DateFormat.getDate...",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/3838527/android-java-date-difference-in-days",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/3838527/android-java-date-difference-in-days",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/3838527/android-java-date-difference-in-days",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "116",
      "text": "Not really a reliable method, better of using JodaTime Calendar thatDay = Calendar.getInstance(); thatDay.set(Calendar.DAY_OF_MONTH,25); thatDay.set(Calendar.MONTH,7); // 0-11 so 1 less thatDay.set..."
     },
     {
      "upvotecount": "76",
      "text": "This is NOT my work, found the answer here. did not want a broken link in the future :). The key is this line for taking daylight setting into account, ref Full Code. TimeZone.setDefault(TimeZone.g..."
     },
     {
      "upvotecount": "33",
      "text": "Most of the answers were good and right for your problem of so i want to find the difference between date in number of days, how do i find difference in days? I suggest this very simple and..."
     },
     {
      "upvotecount": "23",
      "text": "Use jodatime API Days.daysBetween(start.toDateMidnight() , end.toDateMidnight() ).getDays() where 'start' and 'end' are your DateTime objects. To parse your date Strings into DateTime objects..."
     },
     {
      "upvotecount": "14",
      "text": "This fragment accounts for daylight savings time and is O(1). private final static long MILLISECS_PER_DAY = 24 * 60 * 60 * 1000; private static long getDateToLong(Date date) { return Date.UTC(date...."
     },
     {
      "upvotecount": "5",
      "text": "This is Simple and best calculation for me and may be for you. try { /// String CurrDate= \"10/6/2013\"; /// String PrvvDate= \"10/7/2013\"; Date date1 = null; Date date2 = null; SimpleDateFormat..."
     },
     {
      "upvotecount": "3",
      "text": "The Correct Way from Sam Quest's answer only works if the first date is earlier than the second. Moreover, it will return 1 if the two dates are within a single day. This is the solution that..."
     },
     {
      "upvotecount": "3",
      "text": "best and easiest way to do this public int getDays(String begin) throws ParseException { long MILLIS_PER_DAY = 24 * 60 * 60 * 1000; SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy\",..."
     },
     {
      "upvotecount": "2",
      "text": "Use the following functions: /** * Returns the number of days between two dates. The time part of the * days is ignored in this calculation, so 2007-01-01 13:00 and 2007-01-02 05:00 * have..."
     },
     {
      "upvotecount": "2",
      "text": "There's a simple solution, that at least for me, is the only feasible solution. The problem is that all the answers I see being tossed around - using Joda, or Calendar, or Date, or whatever..."
     },
     {
      "upvotecount": "2",
      "text": "All of these solutions suffer from one of two problems. Either the solution isn't perfectly accurate due to rounding errors, leap days and seconds, etc. or you end up looping over the number..."
     },
     {
      "upvotecount": "2",
      "text": "tl;dr ChronoUnit.DAYS.between( LocalDate.parse( \"1999-12-28\" ) , LocalDate.parse( \"12/31/1999\" , DateTimeFormatter.ofPattern( \"MM/dd/yyyy\" ) ) ) Details Other answers are outdated. The old..."
     },
     {
      "upvotecount": "1",
      "text": "One another way: public static int numberOfDaysBetweenDates(Calendar fromDay, Calendar toDay) { fromDay = calendarStartOfDay(fromDay); toDay = calendarStartOfDay(toDay); long from = fromDay.getTime..."
     },
     {
      "upvotecount": "0",
      "text": "I found a very easy way to do this and it's what I'm using in my app. Let's say you have the dates in Time objects (or whatever, we just need the milliseconds): Time date1 = initializeDate1();..."
     },
     {
      "upvotecount": "0",
      "text": "Joda-Time Best way is to use Joda-Time, the highly successful open-source library you would add to your project. String date1 = \"2015-11-11\"; String date2 = \"2013-11-11\"; DateTimeFormatter..."
     },
     {
      "upvotecount": "0",
      "text": "Date userDob = new SimpleDateFormat(\"yyyy-MM-dd\").parse(dob); Date today = new Date(); long diff = today.getTime() - userDob.getTime(); int numOfDays = (int) (diff / (1000 * 60 * 60 * 24));..."
     },
     {
      "upvotecount": "0",
      "text": "use these functions public static int getDateDifference(int previousYear, int previousMonthOfYear, int previousDayOfMonth, int nextYear, int nextMonthOfYear, int nextDayOfMonth, int differenceToCou..."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "In Java, how do I get the difference in seconds between 2 dates?",
   "htmlTitle": "In \u003cb\u003eJava\u003c/b\u003e, how do I get the \u003cb\u003edifference\u003c/b\u003e in seconds between 2 \u003cb\u003edates\u003c/b\u003e?",
   "link": "https://stackoverflow.com/questions/1970239/in-java-how-do-i-get-the-difference-in-seconds-between-2-dates",
   "displayLink": "stackoverflow.com",
   "snippet": "If you have Calendar objects you can call c.getTimeInMillis() .... Today I \nrecommend you use java.time , the modern Java date and time API. .... Just a \npointer: If you're calculating the difference between two java.util.Date the ...",
   "htmlSnippet": "If you have \u003cb\u003eCalendar\u003c/b\u003e objects you can call c.getTimeInMillis() .... Today I \u003cbr\u003e\nrecommend you use \u003cb\u003ejava\u003c/b\u003e.\u003cb\u003etime\u003c/b\u003e , the modern \u003cb\u003eJava date\u003c/b\u003e and \u003cb\u003etime\u003c/b\u003e API. .... Just a \u003cbr\u003e\npointer: If you&#39;re \u003cb\u003ecalculating\u003c/b\u003e the \u003cb\u003edifference\u003c/b\u003e between two \u003cb\u003ejava\u003c/b\u003e.util.\u003cb\u003eDate\u003c/b\u003e the&nbsp;...",
   "cacheId": "FKS9hCT78xAJ",
   "formattedUrl": "https://stackoverflow.com/.../in-java-how-do-i-get-the-difference-in-seconds- between-2-dates",
   "htmlFormattedUrl": "https://stackoverflow.com/.../in-\u003cb\u003ejava\u003c/b\u003e-how-do-i-get-the-\u003cb\u003edifference\u003c/b\u003e-in-seconds- between-2-\u003cb\u003edates\u003c/b\u003e",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "In Java, how do I get the difference in seconds between 2 dates?",
      "name": "In Java, how do I get the difference in seconds between 2 dates?",
      "description": "The Java class library has a class named DateTime. DateTime has this method: int daysBetween(DateTime other) which returns the number of days between this and the parameter. It doesn't have a met..."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "In Java, how do I get the difference in seconds between 2 dates?",
      "upvotecount": "50",
      "text": "The Java class library has a class named DateTime. DateTime has this method: int daysBetween(DateTime other) which returns the number of days between this and the parameter. It doesn't have...",
      "answercount": "11"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/1970239/in-java-how-do-i-get-the-difference-in-seconds-between-2-dates",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "In Java, how do I get the difference in seconds between 2 dates?",
      "twitter:description": "The Java class library has a class named DateTime. DateTime has this method:  int daysBetween(DateTime other)  which returns the number of days between this and the parameter. It doesn't have a met...",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/1970239/in-java-how-do-i-get-the-difference-in-seconds-between-2-dates",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/1970239/in-java-how-do-i-get-the-difference-in-seconds-between-2-dates",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/1970239/in-java-how-do-i-get-the-difference-in-seconds-between-2-dates",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "129",
      "text": "Not familiar with DateTime... If you have two Dates you can call getTime on them to get millseconds, get the diff and divide by 1000. For example Date d1 = ...; Date d2 = ...; long seconds..."
     },
     {
      "upvotecount": "8",
      "text": "You should do org.joda.time.Seconds.secondBetween(date1, date2)"
     },
     {
      "upvotecount": "5",
      "text": "There is no such class as DateTime in the standard Java SE API. Although there is one in joda-time, even that does not have a daysBetween method. Using the standard Java API, the easiest way..."
     },
     {
      "upvotecount": "5",
      "text": "That should do it: Date a = ...; Date b = ...; Math.abs(a.getTime()-b.getTime())/1000; Here the relevant documentation: Date.getTime(). Be aware that this will only work for dates after January..."
     },
     {
      "upvotecount": "3",
      "text": "It is not recommended to use java.util.Date or System.currentTimeMillis() to measure elapsed times. These dates are not guaranteed to be monotonic and will changes occur when the system clock..."
     },
     {
      "upvotecount": "3",
      "text": "If you're using Joda (which may be coming as jsr 310 in JDK 7, separate open source api until then) then there is a Seconds class with a secondsBetween method. Here's the javadoc link: http://joda-..."
     },
     {
      "upvotecount": "2",
      "text": "You can use org.apache.commons.lang.time.DateUtils to make it cleaner: (firstDate.getTime() - secondDate.getTime()) / DateUtils.MILLIS_PER_SECOND"
     },
     {
      "upvotecount": "2",
      "text": "I should like to provide the modern answer. The other answers were fine when this question was asked, but time moves on. Today I recommend you use java.time, the modern Java date and time API...."
     },
     {
      "upvotecount": "0",
      "text": "Which class ? Do you mean the Joda DateTime class ? If so, you can simply call getMillis() on each, and perform the appropriate subtraction/scaling. I would recommend Joda for date/time work,..."
     },
     {
      "upvotecount": "0",
      "text": "Just a pointer: If you're calculating the difference between two java.util.Date the approach of subtracting both dates and dividing it by 1000 is reasonable, but take special care if you get..."
     },
     {
      "upvotecount": "0",
      "text": "Use this method: private Long secondsBetween(Date first, Date second){ return (second.getTime() - first.getTime())/1000; }"
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "Calculating days between two dates with Java - Stack Overflow",
   "htmlTitle": "\u003cb\u003eCalculating\u003c/b\u003e days between two \u003cb\u003edates\u003c/b\u003e with \u003cb\u003eJava\u003c/b\u003e - Stack Overflow",
   "link": "https://stackoverflow.com/questions/20165564/calculating-days-between-two-dates-with-java",
   "displayLink": "stackoverflow.com",
   "snippet": "If this is a problem, diff can also be converted by hand: .... public static int \ndaysBetween(Calendar day1, Calendar day2){ Calendar dayOne ... LocalDate is \nan immutable date-time object that represents a date, often viewed as year-\nmonth-day.",
   "htmlSnippet": "If this is a problem, \u003cb\u003ediff\u003c/b\u003e can also be converted by hand: .... public static int \u003cbr\u003e\ndaysBetween(\u003cb\u003eCalendar\u003c/b\u003e day1, \u003cb\u003eCalendar\u003c/b\u003e day2){ \u003cb\u003eCalendar\u003c/b\u003e dayOne ... LocalDate is \u003cbr\u003e\nan immutable \u003cb\u003edate\u003c/b\u003e-\u003cb\u003etime\u003c/b\u003e object that represents a \u003cb\u003edate\u003c/b\u003e, often viewed as year-\u003cbr\u003e\nmonth-day.",
   "cacheId": "nvTyYXt5yx4J",
   "formattedUrl": "https://stackoverflow.com/.../calculating-days-between-two-dates-with-java",
   "htmlFormattedUrl": "https://stackoverflow.com/.../\u003cb\u003ecalculating\u003c/b\u003e-days-between-two-\u003cb\u003edates\u003c/b\u003e-with-\u003cb\u003ejava\u003c/b\u003e",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "Calculating days between two dates with Java",
      "name": "Calculating days between two dates with Java",
      "description": "I want a Java program that calculates days between two dates. Type the first date (German notation; with whitespaces: \"dd mm yyyy\") Type the second date. The program should calculates the number o..."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "Calculating days between two dates with Java [duplicate]",
      "upvotecount": "99",
      "text": "This question already has an answer here: Calculating the difference between two Java date instances 43 answers I want a Java program that calculates days between two dates. Type the first...",
      "answercount": "10"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/20165564/calculating-days-between-two-dates-with-java",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "Calculating days between two dates with Java",
      "twitter:description": "I want a Java program that calculates days between two dates.  Type the first date (German notation; with whitespaces: \"dd mm yyyy\") Type the second date. The program should calculates the number o...",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/20165564/calculating-days-between-two-dates-with-java",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/20165564/calculating-days-between-two-dates-with-java",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/20165564/calculating-days-between-two-dates-with-java",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "162",
      "text": "You are making some conversions with your Strings that are not necessary. There is a SimpleDateFormat class for it - try this: SimpleDateFormat myFormat = new SimpleDateFormat(\"dd MM yyyy\");..."
     },
     {
      "upvotecount": "76",
      "text": "Simplest way: public static long getDifferenceDays(Date d1, Date d2) { long diff = d2.getTime() - d1.getTime(); return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS); }"
     },
     {
      "upvotecount": "54",
      "text": "Most / all answers caused issues for us when daylight savings time came around. Here's our working solution for all dates, without using JodaTime. It utilizes calendar objects: public static..."
     },
     {
      "upvotecount": "39",
      "text": "In Java 8, you could accomplish this by using LocalDate and DateTimeFormatter. From the Javadoc of LocalDate: LocalDate is an immutable date-time object that represents a date, often viewed..."
     },
     {
      "upvotecount": "8",
      "text": "Use: public int getDifferenceDays(Date d1, Date d2) { int daysdiff = 0; long diff = d2.getTime() - d1.getTime(); long diffDays = diff / (24 * 60 * 60 * 1000) + 1; daysdiff = (int) diffDays;..."
     },
     {
      "upvotecount": "7",
      "text": "Java date libraries are notoriously broken. I would advise to use Joda Time. It will take care of leap year, time zone and so on for you. Minimal working example: import java.util.Scanner;..."
     },
     {
      "upvotecount": "4",
      "text": "String dateStart = \"01/14/2015 08:29:58\"; String dateStop = \"01/15/2015 11:31:48\"; //HH converts hour in 24 hours format (0-23), day calculation SimpleDateFormat format = new SimpleDateFormat(\"MM/d..."
     },
     {
      "upvotecount": "4",
      "text": "The best way, and it converts to a String as bonus ;) protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); try {..."
     },
     {
      "upvotecount": "1",
      "text": "When I run your program, it doesn't even get me to the point where I can enter the second date. This is simpler and less error prone. import java.io.BufferedReader; import java.io.InputStreamReader..."
     },
     {
      "upvotecount": "1",
      "text": "// date format, it will be like \"2015-01-01\" private static final String DATE_FORMAT = \"yyyy-MM-dd\"; // convert a string to java.util.Date public static Date convertStringToJavaDate(String..."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "android - Time difference between two times - Stack Overflow",
   "htmlTitle": "android - \u003cb\u003eTime difference\u003c/b\u003e between two \u003cb\u003etimes\u003c/b\u003e - Stack Overflow",
   "link": "https://stackoverflow.com/questions/15360123/time-difference-between-two-times",
   "displayLink": "stackoverflow.com",
   "snippet": "To Calculate the difference between two dates you could try something like: ... \nTimer updateTimer = new Timer(); updateTimer.schedule(new TimerTask() ..... If \nyou insist on using the ambiguous clock-time format, in Java 9 and later you can\n ...",
   "htmlSnippet": "To \u003cb\u003eCalculate\u003c/b\u003e the \u003cb\u003edifference\u003c/b\u003e between two \u003cb\u003edates\u003c/b\u003e you could try something like: ... \u003cbr\u003e\nTimer updateTimer = new Timer(); updateTimer.\u003cb\u003eschedule\u003c/b\u003e(new TimerTask() ..... If \u003cbr\u003e\nyou insist on using the ambiguous clock-\u003cb\u003etime\u003c/b\u003e format, in \u003cb\u003eJava\u003c/b\u003e 9 and later you can\u003cbr\u003e\n&nbsp;...",
   "cacheId": "AT16EI45nJQJ",
   "formattedUrl": "https://stackoverflow.com/.../time-difference-between-two-times",
   "htmlFormattedUrl": "https://stackoverflow.com/.../\u003cb\u003etime\u003c/b\u003e-\u003cb\u003edifference\u003c/b\u003e-between-two-\u003cb\u003etimes\u003c/b\u003e",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "Time difference between two times",
      "name": "Time difference between two times",
      "description": "I want to display the difference between two times in hh:mm format. The first time is from a database and the second time is the system time. Time difference is updated every second. How can I..."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "Time difference between two times",
      "upvotecount": "11",
      "text": "I want to display the difference between two times in hh:mm format. The first time is from a database and the second time is the system time. Time difference is updated every second. How can...",
      "answercount": "6"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/15360123/time-difference-between-two-times",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "Time difference between two times",
      "twitter:description": "I want to display the difference between two times in hh:mm format.     The first time is from a database and the second time is the system time. Time difference is updated every second.  How can I...",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/15360123/time-difference-between-two-times",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/15360123/time-difference-between-two-times",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/15360123/time-difference-between-two-times",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "15",
      "text": "To Calculate the difference between two dates you could try something like: long mills = date1.getTime() - date2.getTime(); int hours = millis/(1000 * 60 * 60); int mins = (mills/(1000*60))..."
     },
     {
      "upvotecount": "8",
      "text": "finally did it yuppiiieee ... package com.timedynamicllyupdate; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; import android.os.Bundle; import android.app.Act..."
     },
     {
      "upvotecount": "3",
      "text": "Using java.time The modern way is with the java.time classes that supplant the troublesome old date-time classes. The LocalTime class represents a time-of-day without a date and without a time..."
     },
     {
      "upvotecount": "1",
      "text": "The process is roughly as follows, Convert your string instance to a date instance the following way SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\"); Date date = format.parse(\"2011-01-..."
     },
     {
      "upvotecount": "1",
      "text": "OK I Build here Funcion for you: public void omriFunction(){ Date Start = null; Date End = null; SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"HH:mm\"); try { Start = simpleDateFormat.pa..."
     },
     {
      "upvotecount": "0",
      "text": "Hi Guys not sure what I was doing wrong , but this helped for me , hope I can help someone else out. My min were being calculated in some float format so I used this formula long Min = time..."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "java - Calculating workday difference between two calendar dates ...",
   "htmlTitle": "\u003cb\u003ejava\u003c/b\u003e - \u003cb\u003eCalculating\u003c/b\u003e workday \u003cb\u003edifference\u003c/b\u003e between two \u003cb\u003ecalendar dates\u003c/b\u003e ...",
   "link": "https://stackoverflow.com/questions/49963037/calculating-workday-difference-between-two-calendar-dates",
   "displayLink": "stackoverflow.com",
   "snippet": "I highly recommend using the java.time.LocalDate::datesUntil method found in \nJava 9 and later. It only takes a couple lines to calculate, rather ...",
   "htmlSnippet": "I highly recommend using the \u003cb\u003ejava\u003c/b\u003e.\u003cb\u003etime\u003c/b\u003e.LocalDate::datesUntil method found in \u003cbr\u003e\n\u003cb\u003eJava\u003c/b\u003e 9 and later. It only takes a couple lines to \u003cb\u003ecalculate\u003c/b\u003e, rather&nbsp;...",
   "cacheId": "KorizoGj2NcJ",
   "formattedUrl": "https://stackoverflow.com/.../calculating-workday-difference-between-two- calendar-dates",
   "htmlFormattedUrl": "https://stackoverflow.com/.../\u003cb\u003ecalculating\u003c/b\u003e-workday-\u003cb\u003edifference\u003c/b\u003e-between-two- \u003cb\u003ecalendar\u003c/b\u003e-\u003cb\u003edates\u003c/b\u003e",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "Calculating workday difference between two calendar dates",
      "name": "Calculating workday difference between two calendar dates",
      "description": "I'm trying to find workday count between two dates (weekend and time have to ignore). I'm using following function to do that. But it is giving false results for multiple condition like if startdat..."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "Calculating workday difference between two calendar dates [duplicate]",
      "upvotecount": "1",
      "text": "This question already has an answer here: Calculate number of weekdays between two dates in Java 13 answers I'm trying to find workday count between two dates (weekend and time have to ignore)....",
      "answercount": "1"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/49963037/calculating-workday-difference-between-two-calendar-dates",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "Calculating workday difference between two calendar dates",
      "twitter:description": "I'm trying to find workday count between two dates (weekend and time have to ignore). I'm using following function to do that. But it is giving false results for multiple condition like if startdat...",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/49963037/calculating-workday-difference-between-two-calendar-dates",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/49963037/calculating-workday-difference-between-two-calendar-dates",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/49963037/calculating-workday-difference-between-two-calendar-dates",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "8",
      "text": "I highly recommend using the java.time.LocalDate::datesUntil method found in Java 9 and later. It only takes a couple lines to calculate, rather than having to use Calendar: var startDate =..."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  },
  {
   "kind": "customsearch#result",
   "title": "date - Java calculating time with timestamps - Stack Overflow",
   "htmlTitle": "\u003cb\u003edate\u003c/b\u003e - \u003cb\u003eJava calculating time\u003c/b\u003e with timestamps - Stack Overflow",
   "link": "https://stackoverflow.com/questions/28781087/java-calculating-time-with-timestamps",
   "displayLink": "stackoverflow.com",
   "snippet": "(1) A timestamp is a point in time. If you calculate the difference between two \ntimestamps, the result is not a timestamp (point in time), but a ...",
   "htmlSnippet": "(1) A timestamp is a point in \u003cb\u003etime\u003c/b\u003e. If you \u003cb\u003ecalculate\u003c/b\u003e the \u003cb\u003edifference\u003c/b\u003e between two \u003cbr\u003e\ntimestamps, the result is not a timestamp (point in \u003cb\u003etime\u003c/b\u003e), but a&nbsp;...",
   "cacheId": "yxben-CAeewJ",
   "formattedUrl": "https://stackoverflow.com/.../java-calculating-time-with-timestamps",
   "htmlFormattedUrl": "https://stackoverflow.com/.../\u003cb\u003ejava\u003c/b\u003e-\u003cb\u003ecalculating\u003c/b\u003e-\u003cb\u003etime\u003c/b\u003e-with-\u003cb\u003etimes\u003c/b\u003etamps",
   "pagemap": {
    "cse_thumbnail": [
     {
      "width": "225",
      "height": "225",
      "src": "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcS889zvWMRNB8FCxUSpJI5ZA7EV4c8Y6CqAyVf9t5S1PPqLKpwl4XHB_Q3y"
     }
    ],
    "qapage": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "primaryimageofpage": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "title": "Java calculating time with timestamps",
      "name": "Java calculating time with timestamps",
      "description": "Im trying to calculate the time difference between 2 Timestamps, this is the code: Calendar calendar = Calendar.getInstance(); java.util.Date now = calendar.getTime(); Time..."
     }
    ],
    "question": [
     {
      "image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon.png?v=c78bd457575a",
      "name": "Java calculating time with timestamps [duplicate]",
      "upvotecount": "1",
      "text": "This question already has an answer here: Calculating the difference between two Java date instances 43 answers Im trying to calculate the time difference between 2 Timestamps, this is the...",
      "answercount": "1"
     }
    ],
    "metatags": [
     {
      "og:type": "website",
      "og:url": "https://stackoverflow.com/questions/28781087/java-calculating-time-with-timestamps",
      "og:site_name": "Stack Overflow",
      "og:image": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
      "twitter:card": "summary",
      "twitter:domain": "stackoverflow.com",
      "twitter:title": "Java calculating time with timestamps",
      "twitter:description": "Im trying to calculate the time difference between 2 Timestamps, this is the code:          Calendar calendar = Calendar.getInstance();         java.util.Date now = calendar.getTime();         Time...",
      "twitter:app:country": "US",
      "twitter:app:name:iphone": "Stack Exchange iOS",
      "twitter:app:id:iphone": "871299723",
      "twitter:app:url:iphone": "se-zaphod://stackoverflow.com/questions/28781087/java-calculating-time-with-timestamps",
      "twitter:app:name:ipad": "Stack Exchange iOS",
      "twitter:app:id:ipad": "871299723",
      "twitter:app:url:ipad": "se-zaphod://stackoverflow.com/questions/28781087/java-calculating-time-with-timestamps",
      "twitter:app:name:googleplay": "Stack Exchange Android",
      "twitter:app:url:googleplay": "http://stackoverflow.com/questions/28781087/java-calculating-time-with-timestamps",
      "twitter:app:id:googleplay": "com.stackexchange.marvin"
     }
    ],
    "answer": [
     {
      "upvotecount": "3",
      "text": "(1) A timestamp is a point in time. If you calculate the difference between two timestamps, the result is not a timestamp (point in time), but a duration. So it is nonsense to convert the differenc..."
     }
    ],
    "cse_image": [
     {
      "src": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded"
     }
    ]
   }
  }
 ]
}
